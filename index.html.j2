<!doctype html>
<html lang="en" data-theme="light">
<head>
  <meta charset="utf-8" />
  <title>{{ site_title or "versesvibez" }}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="robots" content="index,follow" />
  <meta name="description" content="Poetry & musings by Dami." />
  <link rel="alternate" type="application/rss+xml" title="{{ site_title or 'Feed' }}" href="{{ feed_url }}" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Playfair+Display:ital,wght@0,400;0,700;1,400&display=swap" rel="stylesheet">
  <link rel="icon" href="static/logo-light.png" />

  <style>
    /* ---------- THEME TOKENS ---------- */
    :root{
      --bg: linear-gradient(135deg, #fdfbf7 0%, #f8f4f0 100%);
      --bg-solid: #fdfbf7;
      --paper: rgba(255, 253, 250, 0.85);
      --paper-hover: rgba(255, 253, 250, 0.95);
      --ink: #1a202c;
      --ink-soft: #2d3748;
      --muted: #718096;
      --muted-light: #a0aec0;
      --accent: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      --accent-solid: #667eea;
      --accent-2: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      --accent-2-solid: #f093fb;
      --accent-3: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
      --border: rgba(113, 128, 150, 0.15);
      --border-soft: rgba(113, 128, 150, 0.08);
      --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.04), 0 1px 3px rgba(0, 0, 0, 0.06);
      --shadow: 0 8px 30px rgba(0, 0, 0, 0.08), 0 4px 15px rgba(0, 0, 0, 0.04);
      --shadow-lg: 0 20px 60px rgba(0, 0, 0, 0.12), 0 8px 25px rgba(0, 0, 0, 0.08);
      --grain: 
        radial-gradient(circle at 25% 25%, rgba(102, 126, 234, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 75% 75%, rgba(240, 147, 251, 0.08) 0%, transparent 50%),
        radial-gradient(circle at 50% 10%, rgba(79, 172, 254, 0.06) 0%, transparent 50%);
    }
    
    [data-theme="dark"]{
      --bg: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 100%);
      --bg-solid: #0f0f23;
      --paper: rgba(31, 41, 55, 0.85);
      --paper-hover: rgba(31, 41, 55, 0.95);
      --ink: #f7fafc;
      --ink-soft: #e2e8f0;
      --muted: #94a3b8;
      --muted-light: #64748b;
      --accent: linear-gradient(135deg, #818cf8 0%, #a78bfa 100%);
      --accent-solid: #818cf8;
      --accent-2: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
      --accent-2-solid: #fbbf24;
      --accent-3: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
      --border: rgba(148, 163, 184, 0.15);
      --border-soft: rgba(148, 163, 184, 0.08);
      --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.25), 0 1px 3px rgba(0, 0, 0, 0.15);
      --shadow: 0 8px 30px rgba(0, 0, 0, 0.4), 0 4px 15px rgba(0, 0, 0, 0.25);
      --shadow-lg: 0 20px 60px rgba(0, 0, 0, 0.6), 0 8px 25px rgba(0, 0, 0, 0.35);
      --grain: 
        radial-gradient(circle at 25% 25%, rgba(129, 140, 248, 0.15) 0%, transparent 50%),
        radial-gradient(circle at 75% 75%, rgba(251, 191, 36, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 50% 10%, rgba(6, 182, 212, 0.08) 0%, transparent 50%);
    }

    /* ---------- BASE ---------- */
    *{
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    html, body{
      height: 100%;
      scroll-behavior: smooth;
    }
    
    body{
      background: var(--bg);
      background-attachment: fixed;
      color: var(--ink);
      font: 400 17px/1.75 'Inter', system-ui, -apple-system, 'Segoe UI', sans-serif;
      -webkit-font-smoothing: antialiased;
      text-rendering: optimizeLegibility;
      overflow-x: hidden;
    }
    
    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: var(--grain);
      pointer-events: none;
      z-index: 1;
    }
    
    .main-content {
      position: relative;
      z-index: 2;
    }
    
    a{
      color: inherit;
      text-decoration: none;
      position: relative;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    a:hover {
      color: var(--accent-solid);
    }
    
    .wrap{
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 24px;
    }

    /* ---------- FLOATING PARTICLES ---------- */
    .particles {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      pointer-events: none;
      z-index: 1;
      opacity: 0.6;
    }
    
    .particle {
      position: absolute;
      width: 3px;
      height: 3px;
      background: var(--accent-solid);
      border-radius: 50%;
      animation: float 20s infinite ease-in-out;
    }
    
    @keyframes float {
      0%, 100% { transform: translateY(100vh) rotate(0deg); opacity: 0; }
      10% { opacity: 1; }
      90% { opacity: 1; }
      100% { transform: translateY(-10vh) rotate(360deg); opacity: 0; }
    }

    /* ---------- HERO SECTION ---------- */
    .hero{
      position: relative;
      min-height: 85vh;
      display: flex;
      align-items: center;
      background: 
        radial-gradient(ellipse at top, rgba(102, 126, 234, 0.1) 0%, transparent 60%),
        radial-gradient(ellipse at bottom right, rgba(240, 147, 251, 0.08) 0%, transparent 60%);
      backdrop-filter: blur(1px);
      border-bottom: 1px solid var(--border-soft);
    }
    
    [data-theme="dark"] .hero{
      background: 
        radial-gradient(ellipse at top, rgba(129, 140, 248, 0.15) 0%, transparent 60%),
        radial-gradient(ellipse at bottom right, rgba(251, 191, 36, 0.1) 0%, transparent 60%);
    }
    
    .hero-content {
      text-align: center;
      padding: 80px 0;
    }
    
    .brand-section {
      margin-bottom: 48px;
    }
    
    .brand-link {
      display: inline-flex;
      align-items: center;
      gap: 20px;
      text-decoration: none;
      color: inherit;
      margin-bottom: 16px;
      transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .brand-link:hover {
      transform: translateY(-2px);
    }
    
    .logo-img{
      height: 64px;
      width: auto;
      object-fit: contain;
      border-radius: 16px;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: var(--shadow-sm);
    }
    
    .brand-link:hover .logo-img{
      transform: rotate(-3deg) scale(1.05);
      box-shadow: var(--shadow);
    }

    /* Theme-based logo switching */
    .logo-dark{ display: none; }
    [data-theme="dark"] .logo-light{ display: none; }
    [data-theme="dark"] .logo-dark{ display: inline; }

    .brand-name{
      font-family: 'Playfair Display', serif;
      font-weight: 700;
      font-size: clamp(2.5rem, 5vw, 4rem);
      letter-spacing: -0.02em;
      background: var(--accent);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      position: relative;
    }
    
    .hero-tagline{
      font-family: 'Crimson Text', serif;
      font-style: italic;
      font-size: clamp(1.1rem, 2vw, 1.3rem);
      color: var(--muted);
      margin-bottom: 40px;
      opacity: 0;
      animation: fadeInUp 1s ease-out 0.5s forwards;
    }
    
    @keyframes fadeInUp {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .hero-actions {
      display: flex;
      gap: 16px;
      justify-content: center;
      flex-wrap: wrap;
      margin-bottom: 48px;
      opacity: 0;
      animation: fadeInUp 1s ease-out 0.8s forwards;
    }

    /* ---------- ENHANCED BUTTONS ---------- */
    .btn, .chip{
      display: inline-flex;
      align-items: center;
      gap: 10px;
      padding: 14px 24px;
      border: 1px solid var(--border);
      border-radius: 50px;
      background: var(--paper);
      backdrop-filter: blur(10px);
      color: var(--ink);
      font-weight: 500;
      font-size: 15px;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: var(--shadow-sm);
      position: relative;
      overflow: hidden;
    }
    
    .btn::before, .chip::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }
    
    .btn:hover::before, .chip:hover::before {
      left: 100%;
    }
    
    .btn:hover, .chip:hover{
      transform: translateY(-3px);
      box-shadow: var(--shadow);
      background: var(--paper-hover);
      border-color: var(--accent-solid);
    }
    
    .btn-primary {
      background: var(--accent);
      color: white;
      border: none;
    }
    
    .btn-primary:hover {
      transform: translateY(-3px) scale(1.02);
      box-shadow: var(--shadow-lg);
    }

    /* ---------- SEARCH ---------- */
    .search-section {
      opacity: 0;
      animation: fadeInUp 1s ease-out 1.1s forwards;
    }
    
    .search-wrapper {
      position: relative;
      max-width: 600px;
      margin: 0 auto;
    }
    
    .search-input {
      width: 100%;
      padding: 18px 24px 18px 56px;
      border: 1px solid var(--border);
      border-radius: 50px;
      background: var(--paper);
      backdrop-filter: blur(10px);
      color: var(--ink);
      font-size: 16px;
      outline: none;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: var(--shadow-sm);
    }
    
    .search-input:focus {
      border-color: var(--accent-solid);
      box-shadow: var(--shadow), 0 0 0 3px rgba(102, 126, 234, 0.1);
      transform: translateY(-1px);
    }
    
    .search-icon {
      position: absolute;
      left: 20px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--muted);
      pointer-events: none;
    }

    /* ---------- CONTENT SECTION ---------- */
    .content {
      padding: 80px 0 120px;
      position: relative;
    }
    
    .status {
      text-align: center;
      padding: 60px 24px;
      color: var(--muted);
      font-size: 18px;
      font-family: 'Crimson Text', serif;
      font-style: italic;
    }
    
    .error {
      background: rgba(248, 113, 113, 0.1);
      border: 1px dashed rgba(248, 113, 113, 0.3);
      border-radius: 16px;
      color: #dc2626;
    }

    /* ---------- ENHANCED GRID ---------- */
    .posts-grid {
      display: grid;
      gap: 32px;
      grid-template-columns: 1fr;
      opacity: 0;
      animation: fadeIn 1s ease-out 0.5s forwards;
    }
    
    @media (min-width: 768px) {
      .posts-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }
    
    @media (min-width: 1200px) {
      .posts-grid {
        grid-template-columns: repeat(3, 1fr);
      }
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    /* ---------- ENHANCED CARDS ---------- */
    .card {
      position: relative;
      background: var(--paper);
      backdrop-filter: blur(10px);
      border: 1px solid var(--border);
      border-radius: 24px;
      overflow: hidden;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: var(--shadow-sm);
      transform: translateY(20px);
      opacity: 0;
    }
    
    .card.show {
      transform: translateY(0);
      opacity: 1;
    }
    
    .card::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
      transition: left 0.6s;
      z-index: 1;
    }
    
    .card:hover::before {
      left: 100%;
    }
    
    .card:hover {
      transform: translateY(-8px) rotateX(2deg) rotateY(2deg);
      box-shadow: var(--shadow-lg);
      border-color: var(--accent-solid);
    }
    
    .card-thumb {
      position: relative;
      aspect-ratio: 16/10;
      overflow: hidden;
      background: var(--accent);
    }
    
    .card-thumb img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      filter: blur(8px);
    }
    
    .card-thumb img[data-loaded="1"] {
      filter: blur(0);
    }
    
    .card:hover .card-thumb img {
      transform: scale(1.05);
    }
    
    .card-content {
      padding: 24px;
      position: relative;
      z-index: 2;
    }
    
    .card-title {
      font-family: 'Playfair Display', serif;
      font-weight: 400;
      font-size: clamp(1.2rem, 2vw, 1.4rem);
      line-height: 1.3;
      margin-bottom: 12px;
      color: var(--ink);
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    .card-title a {
      color: inherit;
      text-decoration: none;
    }
    
    .card-title a:hover {
      background: var(--accent);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
    }
    
    .card-meta {
      display: flex;
      gap: 16px;
      align-items: center;
      color: var(--muted);
      font-size: 13px;
      margin-bottom: 16px;
      font-weight: 500;
    }
    
    .card-summary {
      color: var(--ink-soft);
      font-size: 15px;
      line-height: 1.6;
      margin-bottom: 20px;
      display: -webkit-box;
      -webkit-line-clamp: 4;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    .card-badges {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
      margin-bottom: 20px;
    }
    
    .badge {
      display: inline-flex;
      align-items: center;
      padding: 4px 12px;
      background: var(--accent);
      color: white;
      font-size: 11px;
      font-weight: 500;
      border-radius: 12px;
      text-transform: lowercase;
    }
    
    .card-actions {
      display: flex;
      gap: 16px;
      align-items: center;
      font-size: 14px;
      font-weight: 500;
    }
    
    .card-actions a {
      color: var(--muted);
      transition: color 0.3s ease;
      position: relative;
    }
    
    .card-actions a::after {
      content: '';
      position: absolute;
      bottom: -2px;
      left: 0;
      width: 0;
      height: 2px;
      background: var(--accent-solid);
      transition: width 0.3s ease;
    }
    
    .card-actions a:hover {
      color: var(--accent-solid);
    }
    
    .card-actions a:hover::after {
      width: 100%;
    }

    /* ---------- ENHANCED MODALS ---------- */
    .modal {
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.6);
      backdrop-filter: blur(8px);
      display: none;
      align-items: center;
      justify-content: center;
      padding: 24px;
      z-index: 1000;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .modal.open {
      display: flex;
      opacity: 1;
    }
    
    .modal-content {
      max-width: 900px;
      max-height: 85vh;
      width: 100%;
      background: var(--paper);
      backdrop-filter: blur(20px);
      border: 1px solid var(--border);
      border-radius: 24px;
      box-shadow: var(--shadow-lg);
      overflow: hidden;
      transform: scale(0.9) translateY(20px);
      transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .modal.open .modal-content {
      transform: scale(1) translateY(0);
    }
    
    .modal-header {
      padding: 32px 32px 0;
      position: relative;
    }
    
    .modal-close {
      position: absolute;
      top: 20px;
      right: 20px;
      width: 40px;
      height: 40px;
      border: 1px solid var(--border);
      border-radius: 50%;
      background: var(--paper);
      color: var(--muted);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
      transition: all 0.3s ease;
    }
    
    .modal-close:hover {
      background: var(--accent-solid);
      color: white;
      transform: scale(1.1);
    }
    
    .modal-title {
      font-family: 'Playfair Display', serif;
      font-size: clamp(1.5rem, 3vw, 2rem);
      font-weight: 400;
      margin-bottom: 12px;
      color: var(--ink);
      line-height: 1.3;
    }
    
    .modal-meta {
      color: var(--muted);
      font-size: 14px;
      margin-bottom: 24px;
      font-weight: 500;
    }
    
    .modal-body {
      padding: 0 32px 32px;
      font-size: 17px;
      line-height: 1.8;
      color: var(--ink-soft);
      max-height: 60vh;
      overflow-y: auto;
      font-family: 'Crimson Text', serif;
    }
    
    .modal-body::-webkit-scrollbar {
      width: 6px;
    }
    
    .modal-body::-webkit-scrollbar-track {
      background: var(--border-soft);
      border-radius: 3px;
    }
    
    .modal-body::-webkit-scrollbar-thumb {
      background: var(--accent-solid);
      border-radius: 3px;
    }

    /* ---------- ABOUT MODAL ---------- */
    .about-header {
      display: flex;
      gap: 20px;
      align-items: center;
      margin-bottom: 24px;
    }
    
    .about-avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid var(--border);
      box-shadow: var(--shadow);
    }
    
    .about-info h2 {
      font-family: 'Playfair Display', serif;
      font-size: 1.8rem;
      margin-bottom: 8px;
      color: var(--ink);
    }
    
    .about-tagline {
      color: var(--muted);
      font-style: italic;
      font-family: 'Crimson Text', serif;
    }
    
    .about-body {
      font-family: 'Crimson Text', serif;
      font-size: 17px;
      line-height: 1.7;
      color: var(--ink-soft);
      margin-bottom: 32px;
    }
    
    .about-cta {
      display: flex;
      gap: 12px;
      flex-wrap: wrap;
      margin-bottom: 24px;
    }
    
    .about-links {
      display: flex;
      gap: 12px;
      flex-wrap: wrap;
    }
    
    .pill {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 10px 16px;
      border: 1px solid var(--border);
      border-radius: 50px;
      background: var(--paper);
      color: var(--ink);
      text-decoration: none;
      font-weight: 500;
      font-size: 14px;
      transition: all 0.3s ease;
    }
    
    .pill:hover {
      background: var(--accent-solid);
      color: white;
      transform: translateY(-2px);
      box-shadow: var(--shadow);
    }

    /* ---------- FOOTER ---------- */
    .footer {
      background: 
        linear-gradient(180deg, rgba(255,255,255,0.6) 0%, rgba(255,255,255,0.3) 100%),
        var(--bg);
      backdrop-filter: blur(10px);
      border-top: 1px solid var(--border-soft);
      padding: 60px 0 40px;
      margin-top: 80px;
    }
    
    [data-theme="dark"] .footer {
      background: 
        linear-gradient(180deg, rgba(0,0,0,0.4) 0%, rgba(0,0,0,0.2) 100%),
        var(--bg);
    }
    
    .footer-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 32px;
      flex-wrap: wrap;
    }
    
    .footer-brand {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .footer-logo {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      object-fit: contain;
    }
    
    .footer-info h3 {
      font-family: 'Playfair Display', serif;
      font-weight: 400;
      color: var(--ink);
      margin-bottom: 4px;
    }
    
    .footer-copyright {
      color: var(--muted);
      font-size: 13px;
    }
    
    .footer-links {
      display: flex;
      gap: 12px;
      flex-wrap: wrap;
    }

    /* ---------- PROGRESS BAR ---------- */
    .progress-bar {
      position: fixed;
      top: 0;
      left: 0;
      height: 3px;
      width: 0%;
      background: var(--accent);
      z-index: 1001;
      transition: width 0.1s ease;
    }

    /* ---------- FLOATING ELEMENTS ---------- */
    .floating-shapes {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      pointer-events: none;
      z-index: 1;
      overflow: hidden;
    }
    
    .shape {
      position: absolute;
      opacity: 0.1;
      animation: floatShape 20s infinite ease-in-out;
    }
    
    .shape:nth-child(1) {
      top: 10%;
      left: 10%;
      width: 100px;
      height: 100px;
      background: var(--accent-solid);
      border-radius: 50%;
      animation-delay: 0s;
    }
    
    .shape:nth-child(2) {
      top: 70%;
      right: 10%;
      width: 80px;
      height: 80px;
      background: var(--accent-2-solid);
      clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
      animation-delay: 5s;
    }
    
    .shape:nth-child(3) {
      top: 40%;
      left: 80%;
      width: 60px;
      height: 60px;
      background: var(--accent-3-solid);
      transform: rotate(45deg);
      animation-delay: 10s;
    }
    
    @keyframes floatShape {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      33% { transform: translateY(-20px) rotate(120deg); }
      66% { transform: translateY(10px) rotate(240deg); }
    }

    /* ---------- RESPONSIVE ---------- */
    @media (max-width: 768px) {
      .wrap { padding: 0 16px; }
      .hero-actions { flex-direction: column; align-items: stretch; }
      .btn, .chip { justify-content: center; }
      .card-content { padding: 20px; }
      .modal-content { margin: 16px; }
      .modal-header, .modal-body { padding-left: 24px; padding-right: 24px; }
      .footer-content { flex-direction: column; text-align: center; }
      .about-header { flex-direction: column; text-align: center; }
      .hero-content { padding: 60px 0; }
      .content { padding: 60px 0 80px; }
    }

    /* ---------- ANIMATIONS ---------- */
    @keyframes shimmer {
      0% { background-position: -200px 0; }
      100% { background-position: calc(200px + 100%) 0; }
    }
    
    .shimmer {
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      background-size: 200px 100%;
      animation: shimmer 2s infinite;
    }

    /* ---------- UTILITY CLASSES ---------- */
    .hidden { display: none !important; }
    .visually-hidden {
      position: absolute !important;
      width: 1px !important;
      height: 1px !important;
      padding: 0 !important;
      margin: -1px !important;
      overflow: hidden !important;
      clip: rect(0, 0, 0, 0) !important;
      white-space: nowrap !important;
      border: 0 !important;
    }
  </style>
</head>
<body>
  <!-- Floating Shapes -->
  <div class="floating-shapes">
    <div class="shape"></div>
    <div class="shape"></div>
    <div class="shape"></div>
  </div>

  <!-- Particles -->
  <div class="particles" id="particles"></div>

  <!-- Progress Bar -->
  <div class="progress-bar" id="progressBar"></div>

  <div class="main-content">
    <!-- HERO SECTION -->
    <section class="hero">
      <div class="wrap">
        <div class="hero-content">
          <div class="brand-section">
            <a href="./" class="brand-link">
              <img src="static/logo-light.png" alt="Versesvibez logo" class="logo-img logo-light" />
              <img src="static/logo-dark.png" alt="Versesvibez logo" class="logo-img logo-dark" />
              <span class="brand-name">{{ site_title or "versesvibez" }}</span>
            </a>
            <div class="hero-tagline">where words dance with wonder ✨</div>
          </div>

          <div class="hero-actions">
            <button id="themeToggle" class="chip" title="Toggle theme">
              <span>🌓</span> Theme
            </button>
            <button id="aboutBtn" class="btn" title="About">
              <span>👋</span> About
            </button>
            <a class="btn btn-primary" href="{{ public_url.rstrip('/') + '/subscribe' }}" rel="noopener">
              <span>💌</span> Subscribe
            </a>
          </div>

          <div class="search-section">
            <div class="search-wrapper">
              <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none">
                <path d="M21 21l-4.35-4.35M10.5 18A7.5 7.5 0 1010.5 3a7.5 7.5 0 000 15z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
              </svg>
              <input 
                id="searchInput" 
                type="search" 
                class="search-input" 
                placeholder="Search through poems and musings..." 
                aria-label="Search poems"
              />
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- MAIN CONTENT -->
    <main class="content">
      <div class="wrap">
        <div id="statusMessage" class="status">Gathering poems from the digital ether...</div>
        <section id="postsGrid" class="posts-grid" hidden></section>
      </div>
    </main>

    <!-- FOOTER -->
    <footer class="footer">
      <div class="wrap">
        <div class="footer-content">
          <div class="footer-brand">
            <img src="static/logo-light.png" class="footer-logo logo-light" alt="">
            <img src="static/logo-dark.png" class="footer-logo logo-dark" alt="">
            <div class="footer-info">
              <h3>{{ site_title or "versesvibez" }}</h3>
              <div class="footer-copyright">
                © {{ generated_at.strftime("%Y") if generated_at else "2024" }} • Made with ❤️ and pixels
              </div>
            </div>
          </div>

          <nav class="footer-links">
            <a href="#" id="footerAboutLink" class="pill">About</a>
            <a href="{{ public_url.rstrip('/') + '/subscribe' }}" class="pill">Subscribe</a>
            <a href="{{ public_url.rstrip('/') }}" target="_blank" rel="noopener" class="pill">
              <svg viewBox="0 0 24 24" width="16" height="16">
                <path fill="currentColor" d="M3 5h18v2H3V5zm0 4h18v6l-9-3-9 3V9z"/>
              </svg>
              Substack
            </a>
          </nav>
        </div>
      </div>
    </footer>
  </div>

  <!-- READING MODAL -->
  <div id="readingModal" class="modal" aria-hidden="true">
    <div class="modal-content">
      <button class="modal-close" id="readingModalClose" aria-label="Close">✕</button>
      <div class="modal-header">
        <h2 class="modal-title" id="modalTitle"></h2>
        <div class="modal-meta" id="modalMeta"></div>
      </div>
      <div class="modal-body" id="modalBody"></div>
    </div>
  </div>

  <!-- ABOUT MODAL -->
  <div id="aboutModal" class="modal" aria-hidden="true">
    <div class="modal-content">
      <button class="modal-close" id="aboutModalClose" aria-label="Close about">✕</button>
      <div class="modal-header">
        <div class="about-header">
          <img class="about-avatar" src="static/avatar.jpg" alt="Dami" onerror="this.src='static/logo-light.png'">
          <div class="about-info">
            <h2>About Dami</h2>
            <p class="about-tagline">Weaving words into wonder, one poem at a time ✨</p>
          </div>
        </div>

        <div class="about-body">
          <p>
            Welcome to my little corner of the internet where I explore the tender spaces between 
            thoughts and feelings. Here you'll find poems, musings, and little sparks of inspiration 
            that dance through everyday moments.
          </p>
          <p>
            I believe poetry lives in the smallest gestures—the way light falls across a page, 
            the pause between heartbeats, the stories we tell ourselves in the quiet hours. 
            This collection gathers my public posts from Substack, made searchable and beautiful 
            for wandering souls like yourself.
          </p>
        </div>

        <div class="about-cta">
          <a class="btn btn-primary" href="{{ public_url.rstrip('/') + '/subscribe' }}" rel="noopener">
            <span>💌</span> Subscribe on Substack
          </a>
          <button id="copyEmailBtn" class="btn" data-email="versesvibez@substack.com">
            <span>📧</span> Copy Email
          </button>
        </div>

        <div class="about-links">
          <a href="{{ public_url.rstrip('/') }}" target="_blank" rel="noopener" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16">
              <path fill="currentColor" d="M3 5h18v2H3V5zm0 4h18v6l-9-3-9 3V9z"/>
            </svg>
            Substack
          </a>
          <a href="mailto:versesvibez@substack.com" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16">
              <path fill="currentColor" d="M20 4H4a2 2 0 00-2 2v12a2 2 0 002 2h16a2 2 0 002-2V6a2 2 0 00-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
            </svg>
            Email
          </a>
          <a href="https://instagram.com/versesvibez" target="_blank" rel="noopener" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16">
              <path fill="currentColor" d="M7 2h10a5 5 0 015 5v10a5 5 0 01-5 5H7a5 5 0 01-5-5V7a5 5 0 015-5zm5 5a5 5 0 100 10 5 5 0 000-10zm6.5-.9a1.1 1.1 0 110 2.2 1.1 1.1 0 010-2.2zM12 9a3 3 0 110 6 3 3 0 010-6z"/>
            </svg>
            Instagram
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    // ===== CONFIGURATION =====
    const RSS_URL = {{ (feed_url or "https://versesvibez.substack.com/feed") | tojson }};
    let WORKER_BASE = {{ (rss_proxy_url or "") | tojson }};
    const PUBLIC_BASE = "https://api.rss2json.com/v1/api.json?rss_url=";

    function normalizeBase(base) {
      if (!base) return "";
      const hasParam = /[\?&]rss_url=/.test(base);
      if (hasParam) return base;
      const hasQuery = base.includes("?");
      if (!hasQuery) return base + "?rss_url=";
      if (!/[&?]$/.test(base)) base += "&";
      return base + "rss_url=";
    }
    WORKER_BASE = normalizeBase(WORKER_BASE);

    // ===== DOM ELEMENTS =====
    const elements = {
      statusMessage: document.getElementById('statusMessage'),
      postsGrid: document.getElementById('postsGrid'),
      searchInput: document.getElementById('searchInput'),
      progressBar: document.getElementById('progressBar'),
      particles: document.getElementById('particles'),
      
      // Theme
      themeToggle: document.getElementById('themeToggle'),
      
      // Modals
      aboutBtn: document.getElementById('aboutBtn'),
      aboutModal: document.getElementById('aboutModal'),
      aboutModalClose: document.getElementById('aboutModalClose'),
      footerAboutLink: document.getElementById('footerAboutLink'),
      
      readingModal: document.getElementById('readingModal'),
      readingModalClose: document.getElementById('readingModalClose'),
      modalTitle: document.getElementById('modalTitle'),
      modalMeta: document.getElementById('modalMeta'),
      modalBody: document.getElementById('modalBody'),
      
      copyEmailBtn: document.getElementById('copyEmailBtn')
    };

    // ===== GLOBAL STATE =====
    let allPosts = [];
    let currentModalIndex = 0;

    // ===== THEME SYSTEM =====
    class ThemeManager {
      constructor() {
        this.init();
      }

      init() {
        const saved = localStorage.getItem('vv-theme');
        if (saved) {
          document.documentElement.setAttribute('data-theme', saved);
        }
        
        elements.themeToggle.addEventListener('click', () => this.toggle());
      }

      toggle() {
        const current = document.documentElement.getAttribute('data-theme') || 'light';
        const next = current === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', next);
        localStorage.setItem('vv-theme', next);
        
        // Add a little animation feedback
        elements.themeToggle.style.transform = 'scale(0.9)';
        setTimeout(() => {
          elements.themeToggle.style.transform = '';
        }, 150);
      }
    }

    // ===== PARTICLE SYSTEM =====
    class ParticleSystem {
      constructor() {
        this.particles = [];
        this.init();
      }

      init() {
        this.createParticles();
        setInterval(() => this.addParticle(), 3000);
      }

      createParticles() {
        for (let i = 0; i < 5; i++) {
          setTimeout(() => this.addParticle(), i * 1000);
        }
      }

      addParticle() {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 2 + 's';
        particle.style.animationDuration = (15 + Math.random() * 10) + 's';
        
        elements.particles.appendChild(particle);
        
        // Remove after animation
        setTimeout(() => {
          if (particle.parentNode) {
            particle.parentNode.removeChild(particle);
          }
        }, 25000);
      }
    }

    // ===== MODAL SYSTEM =====
    class ModalManager {
      constructor() {
        this.init();
      }

      init() {
        // About modal
        elements.aboutBtn.addEventListener('click', () => this.openAbout());
        elements.footerAboutLink.addEventListener('click', (e) => {
          e.preventDefault();
          this.openAbout();
        });
        elements.aboutModalClose.addEventListener('click', () => this.closeAbout());
        elements.aboutModal.addEventListener('click', (e) => {
          if (e.target === elements.aboutModal) this.closeAbout();
        });

        // Reading modal
        elements.readingModalClose.addEventListener('click', () => this.closeReading());
        elements.readingModal.addEventListener('click', (e) => {
          if (e.target === elements.readingModal) this.closeReading();
        });

        // Keyboard navigation
        document.addEventListener('keydown', (e) => this.handleKeydown(e));

        // Copy email functionality
        elements.copyEmailBtn.addEventListener('click', () => this.copyEmail());

        // Reading progress
        elements.modalBody.addEventListener('scroll', () => this.updateReadingProgress());
      }

      openAbout() {
        elements.aboutModal.classList.add('open');
        elements.aboutModal.setAttribute('aria-hidden', 'false');
        document.body.style.overflow = 'hidden';
      }

      closeAbout() {
        elements.aboutModal.classList.remove('open');
        elements.aboutModal.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
      }

      openReading(post, index) {
        const date = post.pubDate ? new Date(post.pubDate).toLocaleDateString(undefined, {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        }) : '';

        elements.modalTitle.textContent = post.title || 'Untitled';
        elements.modalMeta.textContent = date;
        elements.modalBody.innerHTML = post.content || post.description || '';
        
        elements.readingModal.classList.add('open');
        elements.readingModal.setAttribute('aria-hidden', 'false');
        elements.readingModal.dataset.index = index;
        document.body.style.overflow = 'hidden';
        
        currentModalIndex = index;
        elements.progressBar.style.width = '0%';
      }

      closeReading() {
        elements.readingModal.classList.remove('open');
        elements.readingModal.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
        elements.progressBar.style.width = '0%';
      }

      handleKeydown(e) {
        if (e.key === 'Escape') {
          this.closeAbout();
          this.closeReading();
        }

        if (elements.readingModal.classList.contains('open')) {
          if (e.key === 'ArrowRight' && currentModalIndex < allPosts.length - 1) {
            this.openReading(allPosts[currentModalIndex + 1], currentModalIndex + 1);
          } else if (e.key === 'ArrowLeft' && currentModalIndex > 0) {
            this.openReading(allPosts[currentModalIndex - 1], currentModalIndex - 1);
          }
        }
      }

      async copyEmail() {
        const email = elements.copyEmailBtn.dataset.email || 'versesvibez@substack.com';
        const originalText = elements.copyEmailBtn.innerHTML;
        
        try {
          await navigator.clipboard.writeText(email);
          elements.copyEmailBtn.innerHTML = '<span>✓</span> Copied!';
          setTimeout(() => {
            elements.copyEmailBtn.innerHTML = originalText;
          }, 2000);
        } catch (err) {
          elements.copyEmailBtn.innerHTML = email;
          setTimeout(() => {
            elements.copyEmailBtn.innerHTML = originalText;
          }, 3000);
        }
      }

      updateReadingProgress() {
        const scrollHeight = elements.modalBody.scrollHeight - elements.modalBody.clientHeight;
        const scrolled = scrollHeight > 0 ? (elements.modalBody.scrollTop / scrollHeight) * 100 : 0;
        elements.progressBar.style.width = scrolled + '%';
      }
    }

    // ===== CONTENT SYSTEM =====
    class ContentManager {
      constructor() {
        this.init();
      }

      init() {
        elements.searchInput.addEventListener('input', () => this.handleSearch());
        this.loadContent();
      }

      // Utility functions
      stripHtml(html) {
        const div = document.createElement('div');
        div.innerHTML = html || '';
        
        // Remove subscription widgets
        div.querySelectorAll('.subscription-widget, .subscription-widget-wrap-editor, .button-wrapper').forEach(el => el.remove());
        
        return div.textContent || div.innerText || '';
      }

      extractFirstImage(html) {
        const div = document.createElement('div');
        div.innerHTML = html || '';
        
        const img = div.querySelector('img');
        if (img && img.src) return img.src;
        
        const source = div.querySelector('source[srcset]');
        if (source) {
          const srcset = source.getAttribute('srcset') || '';
          const firstSrc = srcset.split(',')[0]?.trim().split(' ')[0];
          if (firstSrc) return firstSrc;
        }
        
        return null;
      }

      calculateReadingTime(text) {
        const words = (text.trim().match(/\S+/g) || []).length;
        return `${Math.max(1, Math.round(words / 200))} min read`;
      }

      generateVibes(title = '') {
        const words = title.toLowerCase()
          .match(/[a-z]{4,}/g) || [];
        
        return [...new Set(words.slice(0, 2))];
      }

      createPostCard(post, index) {
        const date = post.pubDate ? new Date(post.pubDate) : null;
        const dateStr = date ? date.toLocaleDateString(undefined, {
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        }) : '';

        const htmlContent = post.content || post.description || '';
        const plainText = this.stripHtml(htmlContent);
        const image = this.extractFirstImage(htmlContent);
        const summary = plainText.length > 280 ? plainText.slice(0, 280) + '...' : plainText;
        const readingTime = plainText ? this.calculateReadingTime(plainText) : '';
        const vibes = this.generateVibes(post.title);

        const card = document.createElement('article');
        card.className = 'card';
        card.style.transitionDelay = `${Math.min(index, 15) * 100}ms`;

        card.innerHTML = `
          ${image ? 
            `<div class="card-thumb">
              <img loading="lazy" src="${image}" alt="" />
            </div>` : 
            `<div class="card-thumb"></div>`
          }
          <div class="card-content">
            <h2 class="card-title">
              <a href="${post.link}" target="_blank" rel="noopener">${post.title || 'Untitled'}</a>
            </h2>
            
            <div class="card-meta">
              ${dateStr ? `<span>📅 ${dateStr}</span>` : ''}
              ${readingTime ? `<span>⏱️ ${readingTime}</span>` : ''}
            </div>
            
            <div class="card-summary">${summary}</div>
            
            ${vibes.length > 0 ? `
              <div class="card-badges">
                ${vibes.map(vibe => `<span class="badge">${vibe}</span>`).join('')}
              </div>
            ` : ''}
            
            <div class="card-actions">
              <a href="${post.link}" target="_blank" rel="noopener">Read on Substack →</a>
              <a href="#" data-quick-read="${index}">Quick read</a>
              <a href="#" data-share="${encodeURIComponent(post.link)}">Share</a>
            </div>
          </div>
        `;

        // Handle image loading
        const img = card.querySelector('.card-thumb img');
        if (img) {
          if (img.complete) {
            img.setAttribute('data-loaded', '1');
          } else {
            img.addEventListener('load', () => img.setAttribute('data-loaded', '1'));
          }
        }

        // Add event listeners
        this.attachCardEvents(card, post, index);

        return card;
      }

      attachCardEvents(card, post, index) {
        // Quick read
        const quickReadLink = card.querySelector('[data-quick-read]');
        if (quickReadLink) {
          quickReadLink.addEventListener('click', (e) => {
            e.preventDefault();
            modalManager.openReading(post, index);
          });
        }

        // Share functionality
        const shareLink = card.querySelector('[data-share]');
        if (shareLink) {
          shareLink.addEventListener('click', async (e) => {
            e.preventDefault();
            await this.handleShare(post, shareLink);
          });
        }
      }

      async handleShare(post, shareElement) {
        const url = post.link;
        const title = post.title || 'Poem from versesvibez';
        
        try {
          if (navigator.share) {
            await navigator.share({ title, url });
          } else {
            await navigator.clipboard.writeText(url);
            const originalText = shareElement.textContent;
            shareElement.textContent = 'Copied ✓';
            setTimeout(() => {
              shareElement.textContent = originalText;
            }, 2000);
          }
        } catch (err) {
          console.log('Share failed:', err);
        }
      }

      async loadContent() {
        const workerURL = WORKER_BASE ? WORKER_BASE + encodeURIComponent(RSS_URL) : null;
        const publicURL = PUBLIC_BASE + encodeURIComponent(RSS_URL);
        const attempts = workerURL ? [workerURL, publicURL] : [publicURL];

        for (const url of attempts) {
          try {
            const response = await fetch(url, {
              credentials: 'omit',
              cache: 'no-store'
            });

            if (!response.ok) continue;
            
            const data = await response.json();
            const rawPosts = (data && Array.isArray(data.items)) ? data.items : [];

            // Filter out placeholder posts
            const validPosts = rawPosts.filter(post => {
              const title = (post.title || '').toLowerCase();
              const text = this.stripHtml(post.content || post.description || '').trim();
              
              if (/coming\s+soon/i.test(title)) return false;
              if (text.length < 50) return false;
              
              return true;
            });

            if (validPosts.length) {
              allPosts = validPosts;
              this.renderPosts(validPosts);
              return;
            }

          } catch (err) {
            console.log('Failed to load from:', url, err);
            continue;
          }
        }

        // If we get here, all attempts failed
        this.showError();
      }

      renderPosts(posts) {
        elements.statusMessage.classList.add('hidden');
        elements.postsGrid.hidden = false;
        elements.postsGrid.innerHTML = '';

        posts.forEach((post, index) => {
          const card = this.createPostCard(post, index);
          elements.postsGrid.appendChild(card);
          
          // Trigger show animation
          requestAnimationFrame(() => {
            card.classList.add('show');
          });
        });
      }

      showError() {
        elements.statusMessage.className = 'status error';
        elements.statusMessage.textContent = 'Unable to load poems right now. The words are taking a little break. ☁️';
      }

      handleSearch() {
        const query = elements.searchInput.value.trim().toLowerCase();
        const cards = elements.postsGrid.querySelectorAll('.card');

        if (!query) {
          cards.forEach(card => card.classList.remove('hidden'));
          return;
        }

        allPosts.forEach((post, index) => {
          const searchText = [
            post.title || '',
            this.stripHtml(post.content || post.description || '')
          ].join(' ').toLowerCase();

          const card = cards[index];
          if (card) {
            card.classList.toggle('hidden', !searchText.includes(query));
          }
        });
      }
    }

    // ===== INITIALIZATION =====
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize all systems
      const themeManager = new ThemeManager();
      const particleSystem = new ParticleSystem();
      window.modalManager = new ModalManager(); // Make globally available
      const contentManager = new ContentManager();

      console.log('✨ versesvibez enhanced - ready to inspire');
    });
  </script>
</body>
</html>