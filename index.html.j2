<!doctype html>
<html lang="en" data-theme="light">
<head>
  <meta charset="utf-8" />
  <title>{{ site_title or "Torchborne" }}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="robots" content="index,follow" />
  <meta name="description" content="Poetry & musings by Dami." />
  <meta name="color-scheme" content="light dark" />
  <meta name="theme-color" content="#f59e0b" />
  <link rel="canonical" href="{{ public_url or '' }}" />

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Playfair+Display:ital,wght@0,400;0,700;1,400&display=swap" rel="stylesheet">

  <link rel="alternate" type="application/rss+xml" title="{{ site_title or 'Feed' }}" href="{{ feed_url }}" />
  <link rel="icon" href="static/logo-light.png" />

  <!-- Open Graph -->
  <meta property="og:title" content="{{ site_title or 'Torchborne' }}" />
  <meta property="og:description" content="Poetry & musings by Dami." />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="{{ public_url or '' }}" />
  <meta property="og:image" content="{{ public_url.rstrip('/') + '/static/logo-light.png' if public_url else 'static/logo-light.png' }}" />
  <meta name="twitter:card" content="summary_large_image">

  <style>
    /* ---------- THEME TOKENS ---------- */
    :root{
      --bg: linear-gradient(135deg, #fdfcf8 0%, #f8f5ef 100%);
      --bg-solid: #fdfcf8;
      --paper: rgba(255, 252, 245, 0.9);
      --paper-hover: rgba(255, 252, 245, 0.98);
      --ink: #1a1a1a;
      --ink-soft: #333333;
      --muted: #7c6f64;
      --muted-light: #b6a999;
      --accent: linear-gradient(135deg, #fbbf24 0%, #f97316 100%);
      --accent-solid: #f59e0b;
      --accent-2: linear-gradient(135deg, #ef4444 0%, #b91c1c 100%);
      --accent-2-solid: #dc2626;
      --accent-3: linear-gradient(135deg, #0ea5e9 0%, #0369a1 100%);
      --border: rgba(124, 111, 100, 0.2);
      --border-soft: rgba(124, 111, 100, 0.1);
      --shadow-sm: 0 2px 8px rgba(0,0,0,0.05), 0 1px 3px rgba(0,0,0,0.06);
      --shadow: 0 8px 30px rgba(0,0,0,0.12), 0 4px 15px rgba(0,0,0,0.06);
      --shadow-lg: 0 20px 60px rgba(0,0,0,0.2), 0 8px 25px rgba(0,0,0,0.12);
      --grain:
        radial-gradient(circle at 25% 25%, rgba(251, 191, 36, 0.08) 0%, transparent 50%),
        radial-gradient(circle at 75% 75%, rgba(239, 68, 68, 0.06) 0%, transparent 50%),
        radial-gradient(circle at 50% 10%, rgba(14, 165, 233, 0.06) 0%, transparent 50%);
    }
    [data-theme="dark"]{
      --bg: linear-gradient(135deg, #0d0d0d 0%, #1a1a1a 100%);
      --bg-solid: #0d0d0d;
      --paper: rgba(24, 24, 24, 0.85);
      --paper-hover: rgba(24, 24, 24, 0.95);
      --ink: #fefae0;
      --ink-soft: #e5decf;
      --muted: #a58b75;
      --muted-light: #7c6f64;
      --accent: linear-gradient(135deg, #fbbf24 0%, #f97316 100%);
      --accent-solid: #fbbf24;
      --accent-2: linear-gradient(135deg, #ef4444 0%, #b91c1c 100%);
      --accent-2-solid: #ef4444;
      --accent-3: linear-gradient(135deg, #0ea5e9 0%, #0369a1 100%);
      --border: rgba(245, 158, 11, 0.15);
      --border-soft: rgba(245, 158, 11, 0.08);
      --shadow-sm: 0 2px 8px rgba(251,191,36,0.15), 0 1px 3px rgba(0,0,0,0.25);
      --shadow: 0 8px 30px rgba(251,191,36,0.25), 0 4px 15px rgba(0,0,0,0.35);
      --shadow-lg: 0 20px 60px rgba(251,191,36,0.35), 0 8px 25px rgba(0,0,0,0.45);
      --grain:
        radial-gradient(circle at 25% 25%, rgba(251, 191, 36, 0.12) 0%, transparent 50%),
        radial-gradient(circle at 75% 75%, rgba(239, 68, 68, 0.10) 0%, transparent 50%),
        radial-gradient(circle at 50% 10%, rgba(14, 165, 233, 0.08) 0%, transparent 50%);
    }

    /* ---------- BASE ---------- */
    *{ box-sizing: border-box; margin: 0; padding: 0; }
    html, body{ height: 100%; scroll-behavior: smooth; }
    body{
      background: var(--bg);
      background-attachment: fixed;
      color: var(--ink);
      font: 400 17px/1.75 'Inter', system-ui, -apple-system, 'Segoe UI', sans-serif;
      -webkit-font-smoothing: antialiased; text-rendering: optimizeLegibility;
      overflow-x: hidden;
    }
    body::before { content: ''; position: fixed; inset: 0; background: var(--grain); pointer-events: none; z-index: 1; }
    .main-content { position: relative; z-index: 2; }
    a{ color: inherit; text-decoration: none; position: relative; transition: all .3s cubic-bezier(.4,0,.2,1); }
    a:hover { color: var(--accent-solid); }
    .wrap{ max-width: 1200px; margin: 0 auto; padding: 0 24px; }

    /* Reduced motion */
    @media (prefers-reduced-motion: reduce) {
      .particles, .floating-shapes { display: none !important; }
      * { animation: none !important; transition: none !important; }
    }

    /* ---------- PARTICLES ---------- */
    .particles { position: fixed; inset: 0; pointer-events: none; z-index: 1; opacity: .6; }
    .particle { position: absolute; width: 3px; height: 3px; background: var(--accent-solid); border-radius: 50%; }

    /* ---------- HERO ---------- */
    .hero{ position: relative; min-height: 85vh; display: flex; align-items: center; background:
      radial-gradient(ellipse at top, rgba(251,191,36,.10) 0%, transparent 60%),
      radial-gradient(ellipse at bottom right, rgba(239,68,68,.08) 0%, transparent 60%);
      backdrop-filter: blur(1px); border-bottom: 1px solid var(--border-soft);
    }
    [data-theme="dark"] .hero{ background:
      radial-gradient(ellipse at top, rgba(251,191,36,.15) 0%, transparent 60%),
      radial-gradient(ellipse at bottom right, rgba(239,68,68,.10) 0%, transparent 60%);
    }
    .hero-content { text-align: center; padding: 80px 0; }
    .brand-section { margin-bottom: 48px; }
    .brand-link { display: inline-flex; align-items: center; gap: 20px; color: inherit; margin-bottom: 16px; transition: transform .4s cubic-bezier(.4,0,.2,1); }
    .brand-link:hover { transform: translateY(-2px); }
    .logo-img{ height: 64px; width: auto; object-fit: contain; border-radius: 16px; transition: all .4s cubic-bezier(.4,0,.2,1); box-shadow: var(--shadow-sm); }
    .brand-link:hover .logo-img{ transform: rotate(-3deg) scale(1.05); box-shadow: var(--shadow); }
    .logo-dark{ display: none; }
    [data-theme="dark"] .logo-light{ display: none; }
    [data-theme="dark"] .logo-dark{ display: inline; }
    .brand-name{ font-family: 'Playfair Display', serif; font-weight: 700; font-size: clamp(2.5rem, 5vw, 4rem); letter-spacing: -0.02em; background: var(--accent); -webkit-background-clip: text; background-clip: text; color: transparent; position: relative; }
    .hero-tagline{ font-family: 'Crimson Text', serif; font-style: italic; font-size: clamp(1.1rem, 2vw, 1.3rem); color: var(--muted); margin-bottom: 40px; opacity: 0; animation: fadeInUp 1s ease-out .5s forwards; }
    @keyframes fadeInUp { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
    .hero-actions { display: flex; gap: 16px; justify-content: center; flex-wrap: wrap; margin-bottom: 48px; opacity: 0; animation: fadeInUp 1s ease-out .8s forwards; }

    /* ---------- BUTTONS ---------- */
    .btn, .chip{ display: inline-flex; align-items: center; gap: 10px; padding: 14px 24px; border: 1px solid var(--border); border-radius: 50px; background: var(--paper); backdrop-filter: blur(10px); color: var(--ink); font-weight: 500; font-size: 15px; cursor: pointer; transition: all .3s cubic-bezier(.4,0,.2,1); box-shadow: var(--shadow-sm); position: relative; overflow: hidden; }
    .btn::before, .chip::before { content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent, rgba(255,255,255,.2), transparent); transition: left .5s; }
    .btn:hover::before, .chip:hover::before { left: 100%; }
    .btn:hover, .chip:hover{ transform: translateY(-3px); box-shadow: var(--shadow); background: var(--paper-hover); border-color: var(--accent-solid); }
    .btn-primary { background: var(--accent); color: white; border: none; }
    .btn-primary:hover { transform: translateY(-3px) scale(1.02); box-shadow: var(--shadow-lg); }

    /* ---------- SEARCH ---------- */
    .search-section { opacity: 0; animation: fadeInUp 1.2s ease-out 1.1s forwards; }
    .search-wrapper { position: relative; max-width: 600px; margin: 0 auto; }
    .search-input { width: 100%; padding: 18px 24px 18px 56px; border: 1px solid var(--border); border-radius: 50px; background: var(--paper); backdrop-filter: blur(10px); color: var(--ink); font-size: 16px; outline: none; transition: all .3s cubic-bezier(.4,0,.2,1); box-shadow: var(--shadow-sm); }
    .search-input:focus { border-color: var(--accent-solid); box-shadow: var(--shadow), 0 0 0 3px rgba(245,158,11,.18); transform: translateY(-1px); }
    .search-icon { position: absolute; left: 20px; top: 50%; transform: translateY(-50%); color: var(--muted); pointer-events: none; }

    /* ---------- CONTENT ---------- */
    .content { padding: 80px 0 120px; position: relative; }
    .status { text-align: center; padding: 60px 24px; color: var(--muted); font-size: 18px; font-family: 'Crimson Text', serif; font-style: italic; }
    .status[aria-live] { min-height: 3em; }
    .error { background: rgba(248,113,113,.1); border: 1px dashed rgba(248,113,113,.3); border-radius: 16px; color: #dc2626; }

    /* ---------- GRID ---------- */
    .posts-grid { display: grid; gap: 32px; grid-template-columns: 1fr; opacity: 0; animation: fadeIn 1s ease-out .5s forwards; }
    @media (min-width: 768px) { .posts-grid { grid-template-columns: repeat(2, 1fr); } }
    @media (min-width: 1200px) { .posts-grid { grid-template-columns: repeat(3, 1fr); } }
    @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }

    /* ---------- CARDS ---------- */
    .card { position: relative; background: var(--paper); backdrop-filter: blur(10px); border: 1px solid var(--border); border-radius: 24px; overflow: hidden; transition: all .4s cubic-bezier(.4,0,.2,1); box-shadow: var(--shadow-sm); transform: translateY(20px); opacity: 0; }
    .card.show { transform: translateY(0); opacity: 1; }
    .card::before { content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent, rgba(255,255,255,.1), transparent); transition: left .6s; z-index: 1; }
    .card:hover::before { left: 100%; }
    .card:hover { transform: translateY(-8px) rotateX(2deg) rotateY(2deg); box-shadow: var(--shadow-lg); border-color: var(--accent-solid); }
    .card-thumb { position: relative; aspect-ratio: 16/10; overflow: hidden; background: var(--accent); }
    .card-thumb img { width: 100%; height: 100%; object-fit: cover; transition: all .4s cubic-bezier(.4,0,.2,1); filter: blur(8px); }
    .card-thumb img[data-loaded="1"] { filter: blur(0); }
    .card:hover .card-thumb img { transform: scale(1.05); }
    .card-content { padding: 24px; position: relative; z-index: 2; }
    .card-title { font-family: 'Playfair Display', serif; font-weight: 400; font-size: clamp(1.2rem, 2vw, 1.4rem); line-height: 1.3; margin-bottom: 12px; color: var(--ink); display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; }
    .card-title a { color: inherit; text-decoration: none; }
    .card-title a:hover { background: var(--accent); -webkit-background-clip: text; background-clip: text; color: transparent; }
    .card-meta { display: flex; gap: 16px; align-items: center; color: var(--muted); font-size: 13px; margin-bottom: 16px; font-weight: 500; }
    .card-summary { color: var(--ink-soft); font-size: 15px; line-height: 1.6; margin-bottom: 20px; display: -webkit-box; -webkit-line-clamp: 4; -webkit-box-orient: vertical; overflow: hidden; }
    .card-badges { display: flex; gap: 8px; flex-wrap: wrap; margin-bottom: 20px; }
    .badge { display: inline-flex; align-items: center; padding: 4px 12px; background: var(--accent); color: white; font-size: 11px; font-weight: 500; border-radius: 12px; text-transform: lowercase; }
    .card-actions { display: flex; gap: 16px; align-items: center; font-size: 14px; font-weight: 500; }
    .card-actions a { color: var(--muted); transition: color .3s ease; position: relative; }
    .card-actions a::after { content: ''; position: absolute; bottom: -2px; left: 0; width: 0; height: 2px; background: var(--accent-solid); transition: width .3s ease; }
    .card-actions a:hover { color: var(--accent-solid); }
    .card-actions a:hover::after { width: 100%; }

    /* ---------- MODALS ---------- */
    .modal { position: fixed; inset: 0; background: rgba(0, 0, 0, 0.6); backdrop-filter: blur(8px); display: none; align-items: center; justify-content: center; padding: 24px; z-index: 1000; opacity: 0; transition: opacity .3s ease; }
    .modal.open { display: flex; opacity: 1; }
    .modal-content { max-width: 900px; max-height: 85vh; width: 100%; background: var(--paper); backdrop-filter: blur(20px); border: 1px solid var(--border); border-radius: 24px; box-shadow: var(--shadow-lg); overflow: hidden; transform: scale(.9) translateY(20px); transition: transform .3s cubic-bezier(.4,0,.2,1); }
    .modal.open .modal-content { transform: scale(1) translateY(0); }
    .modal-header { padding: 32px 32px 0; position: relative; }
    .modal-close { position: absolute; top: 20px; right: 20px; width: 40px; height: 40px; border: 1px solid var(--border); border-radius: 50%; background: var(--paper); color: var(--muted); cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 18px; transition: all .3s ease; }
    .modal-close:hover { background: var(--accent-solid); color: white; transform: scale(1.1); }
    .modal-title { font-family: 'Playfair Display', serif; font-size: clamp(1.5rem, 3vw, 2rem); font-weight: 400; margin-bottom: 12px; color: var(--ink); line-height: 1.3; }
    .modal-meta { color: var(--muted); font-size: 14px; margin-bottom: 16px; font-weight: 500; }
    .modal-actions { display: flex; gap: 8px; margin-bottom: 8px; }
    .modal-body { padding: 0 32px 32px; font-size: 17px; line-height: 1.8; color: var(--ink-soft); max-height: 60vh; overflow-y: auto; font-family: 'Crimson Text', serif; }
    .modal-body img{ max-width: 100%; height: auto; }
    .modal-body::-webkit-scrollbar { width: 6px; }
    .modal-body::-webkit-scrollbar-track { background: var(--border-soft); border-radius: 3px; }
    .modal-body::-webkit-scrollbar-thumb { background: var(--accent-solid); border-radius: 3px; }

    /* ---------- ABOUT MODAL ---------- */
    .about-header { display: flex; gap: 20px; align-items: center; margin-bottom: 24px; }
    .about-avatar { width: 80px; height: 80px; border-radius: 50%; object-fit: cover; border: 3px solid var(--border); box-shadow: var(--shadow); }
    .about-info h2 { font-family: 'Playfair Display', serif; font-size: 1.8rem; margin-bottom: 8px; color: var(--ink); }
    .about-tagline { color: var(--muted); font-style: italic; font-family: 'Crimson Text', serif; }
    .about-body { font-family: 'Crimson Text', serif; font-size: 17px; line-height: 1.7; color: var(--ink-soft); margin-bottom: 32px; }
    .about-cta { display: flex; gap: 12px; flex-wrap: wrap; margin-bottom: 24px; }
    .about-links { display: flex; gap: 12px; flex-wrap: wrap; }
    .pill { display: inline-flex; align-items: center; gap: 8px; padding: 10px 16px; border: 1px solid var(--border); border-radius: 50px; background: var(--paper); color: var(--ink); text-decoration: none; font-weight: 500; font-size: 14px; transition: all .3s ease; }
    .pill:hover { background: var(--accent-solid); color: white; transform: translateY(-2px); box-shadow: var(--shadow); }

    /* ---------- FOOTER ---------- */
    .footer { background: linear-gradient(180deg, rgba(255,255,255,.6) 0%, rgba(255,255,255,.3) 100%), var(--bg); backdrop-filter: blur(10px); border-top: 1px solid var(--border-soft); padding: 60px 0 40px; margin-top: 80px; }
    [data-theme="dark"] .footer { background: linear-gradient(180deg, rgba(0,0,0,.4) 0%, rgba(0,0,0,.2) 100%), var(--bg); }
    .footer-content { display: flex; justify-content: space-between; align-items: center; gap: 32px; flex-wrap: wrap; }
    .footer-brand { display: flex; align-items: center; gap: 12px; }
    .footer-logo { width: 32px; height: 32px; border-radius: 8px; object-fit: contain; }
    .footer-info h3 { font-family: 'Playfair Display', serif; font-weight: 400; color: var(--ink); margin-bottom: 4px; }
    .footeropyright { color: var(--muted); font-size: 13px; }
    .footer-links { display: flex; gap: 12px; flex-wrap: wrap; }

    /* ---------- PROGRESS BAR ---------- */
    .progress-bar { position: fixed; top: 0; left: 0; height: 3px; width: 0%; background: var(--accent); z-index: 1001; transition: width .1s ease; }

    /* ---------- FLOATING SHAPES ---------- */
    .floating-shapes { position: fixed; inset: 0; pointer-events: none; z-index: 1; overflow: hidden; }
    .shape { position: absolute; opacity: .1; animation: floatShape 20s infinite ease-in-out; }
    .shape:nth-child(1) { top: 10%; left: 10%; width: 100px; height: 100px; background: var(--accent-solid); border-radius: 50%; animation-delay: 0s; }
    .shape:nth-child(2) { top: 70%; right: 10%; width: 80px; height: 80px; background: var(--accent-2-solid); clip-path: polygon(50% 0%, 0% 100%, 100% 100%); animation-delay: 5s; }
    .shape:nth-child(3) { top: 40%; left: 80%; width: 60px; height: 60px; background: var(--accent-3-solid); transform: rotate(45deg); animation-delay: 10s; }
    @keyframes floatShape { 0%, 100% { transform: translateY(0) rotate(0deg); } 33% { transform: translateY(-20px) rotate(120deg); } 66% { transform: translateY(10px) rotate(240deg); } }

    /* ---------- RESPONSIVE ---------- */
    @media (max-width: 768px) {
      .wrap { padding: 0 16px; }
      .hero-actions { flex-direction: column; align-items: stretch; }
      .btn, .chip { justify-content: center; }
      .card-content { padding: 20px; }
      .modal-content { margin: 16px; }
      .modal-header, .modal-body { padding-left: 24px; padding-right: 24px; }
      .footer-content { flex-direction: column; text-align: center; }
      .about-header { flex-direction: column; text-align: center; }
      .hero-content { padding: 60px 0; }
      .content { padding: 60px 0 80px; }
    }

    /* ---------- ANIMATIONS ---------- */
    @keyframes shimmer { 0% { background-position: -200px 0; } 100% { background-position: calc(200px + 100%) 0; } }
    .shimmer { background: linear-gradient(90deg, transparent, rgba(255,255,255,.2), transparent); background-size: 200px 100%; animation: shimmer 2s infinite; }

    /* ---------- UTILITY ---------- */
    .hidden { display: none !important; }
    .visually-hidden { position: absolute !important; width: 1px !important; height: 1px !important; padding: 0 !important; margin: -1px !important; overflow: hidden !important; clip: rect(0, 0, 0, 0) !important; white-space: nowrap !important; border: 0 !important; }
  </style>
</head>
<body>
  <noscript>
    <div class="status error" role="alert">JavaScript is disabled. Some features (search, quick read) won't work. You can still read directly on Substack via the links below.</div>
  </noscript>

  <!-- Floating Shapes -->
  <div class="floating-shapes" aria-hidden="true">
    <div class="shape"></div>
    <div class="shape"></div>
    <div class="shape"></div>
  </div>

  <!-- Particles -->
  <div class="particles" id="particles" aria-hidden="true"></div>

  <!-- Progress Bar -->
  <div class="progress-bar" id="progressBar" role="progressbar" aria-live="off" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"></div>

  <div id="appRoot" class="main-content" aria-hidden="false">
    <!-- HERO -->
    <section class="hero">
      <div class="wrap">
        <div class="hero-content">
          <div class="brand-section">
            <a href="./" class="brand-link">
              <img src="static/logo-light.png" alt="Torchborne logo" class="logo-img logo-light" loading="lazy" decoding="async" />
              <img src="static/logo-dark.png" alt="Torchborne logo" class="logo-img logo-dark" loading="lazy" decoding="async" />
              <span class="brand-name">{{ site_title or "Torchborne" }}</span>
            </a>
            <div class="hero-tagline" aria-live="polite">where words carry the flame ✨</div>
          </div>

          <div class="hero-actions">
            <button id="themeToggle" class="chip" title="Toggle theme" aria-pressed="false">
              <span id="themeIcon" aria-hidden="true">🌓</span> <span id="themeText">Theme</span>
            </button>
            <button id="aboutBtn" class="btn" title="About" aria-haspopup="dialog" aria-controls="aboutModal">
              <span>👋</span> About
            </button>
            <a class="btn btn-primary" href="{{ public_url.rstrip('/') + '/subscribe' }}" rel="noopener">
              <span>💌</span> Subscribe
            </a>
          </div>

          <div class="search-section">
            <div class="search-wrapper">
              <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                <path d="M21 21l-4.35-4.35M10.5 18A7.5 7.5 0 1010.5 3a7.5 7.5 0 000 15z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
              </svg>
              <input id="searchInput" type="search" class="search-input" placeholder="Search through poems and musings..." aria-label="Search poems" />
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- MAIN CONTENT -->
    <main class="content">
      <div class="wrap">
        <div id="statusMessage" class="status" role="status" aria-live="polite">Gathering poems from the digital ether...</div>
        <section id="postsGrid" class="posts-grid" hidden></section>
      </div>
    </main>

    <!-- FOOTER -->
    <footer class="footer">
      <div class="wrap">
        <div class="footer-content">
          <div class="footer-brand">
            <img src="static/logo-light.png" class="footer-logo logo-light" alt="" aria-hidden="true">
            <img src="static/logo-dark.png" class="footer-logo logo-dark" alt="" aria-hidden="true">
            <div class="footer-info">
              <h3>{{ site_title or "Torchborne" }}</h3>
              <div class="footeropyright">© {{ generated_at.strftime("%Y") if generated_at else "2024" }} • Made with ❤️ and pixels</div>
            </div>
          </div>

          <nav class="footer-links" aria-label="Footer">
            <a href="#" id="footerAboutLink" class="pill">About</a>
            <a href="{{ public_url.rstrip('/') + '/subscribe' }}" class="pill">Subscribe</a>
            <a href="{{ public_url.rstrip('/') }}" target="_blank" rel="noopener" class="pill">
              <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
                <path fill="currentColor" d="M3 5h18v2H3V5zm0 4h18v6l-9-3-9 3V9z"/>
              </svg>
              Substack
            </a>
          </nav>
        </div>
      </div>
    </footer>
  </div>

  <!-- READING MODAL -->
  <div id="readingModal" class="modal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="modalTitle" aria-describedby="modalBody" tabindex="-1">
    <div class="modal-content">
      <button class="modal-close" id="readingModalClose" aria-label="Close">✕</button>
      <div class="modal-header">
        <h2 class="modal-title" id="modalTitle"></h2>
        <div class="modal-meta" id="modalMeta"></div>
        <div class="modal-actions">
          <button id="prevPost" class="chip" title="Previous (←)">← Prev</button>
          <button id="nextPost" class="chip" title="Next (→)">Next →</button>
        </div>
      </div>
      <div class="modal-body" id="modalBody"></div>
    </div>
  </div>

  <!-- ABOUT MODAL -->
  <div id="aboutModal" class="modal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="aboutTitle" tabindex="-1">
    <div class="modal-content">
      <button class="modal-close" id="aboutModalClose" aria-label="Close about">✕</button>
      <div class="modal-header">
        <div class="about-header">
          <img class="about-avatar" src="static/avatar.jpg" alt="Torchborne" onerror="this.src='static/logo-light.png'">
          <div class="about-info">
            <h2 id="aboutTitle">About Torchborne</h2>
            <p class="about-tagline">Illuminating poetry, carrying the flame of words ✨</p>
          </div>
        </div>

        <div class="about-body">
          <p>Welcome to my little corner of the internet where I explore the tender spaces between thoughts and feelings. Here you'll find poems, musings, and little sparks of inspiration that dance through everyday moments.</p>
          <p>I believe poetry lives in the smallest gestures—the way light falls across a page, the pause between heartbeats, the stories we tell ourselves in the quiet hours. This collection gathers my public posts from Substack, made searchable and beautiful for wandering souls like yourself.</p>
        </div>

        <div class="about-cta">
          <a class="btn btn-primary" href="{{ public_url.rstrip('/') + '/subscribe' }}" rel="noopener">
            <span>💌</span> Subscribe on Substack
          </a>
          <button id="copyEmailBtn" class="btn" data-email="versesvibez@substack.com">
            <span>📧</span> Copy Email
          </button>
        </div>

        <div class="about-links">
          <a href="{{ public_url.rstrip('/') }}" target="_blank" rel="noopener" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
              <path fill="currentColor" d="M3 5h18v2H3V5zm0 4h18v6l-9-3-9 3V9z"/>
            </svg>
            Substack
          </a>
          <a href="mailto:versesvibez@substack.com" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
              <path fill="currentColor" d="M20 4H4a2 2 0 00-2 2v12a2 2 0 002 2h16a2 2 0 002-2V6a2 2 0 00-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
            </svg>
            Email
          </a>
          <a href="https://instagram.com/versesvibez" target="_blank" rel="noopener" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
              <path fill="currentColor" d="M7 2h10a5 5 0 015 5v10a5 5 0 01-5 5H7a5 5 0 01-5-5V7a5 5 0 015-5zm5 5a5 5 0 100 10 5 5 0 000-10zm6.5-.9a1.1 1.1 0 110 2.2 1.1 1.1 0 010-2.2zM12 9a3 3 0 110 6 3 3 0 010-6z"/>
            </svg>
            Instagram
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    // ===== CONFIG =====
    const RSS_URL = {{ (feed_url or "https://versesvibez.substack.com/feed") | tojson }};
    let WORKER_BASE = {{ (rss_proxy_url or "") | tojson }}; // e.g., "https://substack-proxy.robinvp3.workers.dev/?rss_url="
    const PUBLIC_BASE = "https://api.rss2json.com/v1/api.json?rss_url=";

    function normalizeBase(base) {
      if (!base) return "";
      const hasParam = /[\\?&]rss_url=/.test(base);
      if (hasParam) return base;
      const hasQuery = base.includes("?");
      if (!hasQuery) return base + "?rss_url=";
      if (!/[&?]$/.test(base)) base += "&";
      return base + "rss_url=";
    }
    WORKER_BASE = normalizeBase(WORKER_BASE);

    // ===== DOM =====
    const els = {
      appRoot: document.getElementById('appRoot'),
      status: document.getElementById('statusMessage'),
      grid: document.getElementById('postsGrid'),
      search: document.getElementById('searchInput'),
      bar: document.getElementById('progressBar'),
      particles: document.getElementById('particles'),
      themeToggle: document.getElementById('themeToggle'),
      themeIcon: document.getElementById('themeIcon'),
      themeText: document.getElementById('themeText'),
      aboutBtn: document.getElementById('aboutBtn'),
      aboutModal: document.getElementById('aboutModal'),
      aboutClose: document.getElementById('aboutModalClose'),
      footerAbout: document.getElementById('footerAboutLink'),
      readingModal: document.getElementById('readingModal'),
      readingClose: document.getElementById('readingModalClose'),
      modalTitle: document.getElementById('modalTitle'),
      modalMeta: document.getElementById('modalMeta'),
      modalBody: document.getElementById('modalBody'),
      prev: document.getElementById('prevPost'),
      next: document.getElementById('nextPost'),
      copyEmailBtn: document.getElementById('copyEmailBtn'),
    };

    // ===== STATE =====
    let posts = [];
    let iModal = 0;
    let lastFocus = null;
    const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    // ===== UTIL =====
    const debounce = (fn, ms=200) => {
      let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), ms); };
    };

    // Theme
    class ThemeManager {
      init(){
        const saved = localStorage.getItem('vv-theme');
        if (saved) document.documentElement.setAttribute('data-theme', saved);
        this.syncButton();
        els.themeToggle?.addEventListener('click', () => this.toggle(), { passive: true });
      }
      toggle(){
        const cur = document.documentElement.getAttribute('data-theme') || 'light';
        const next = cur === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', next);
        localStorage.setItem('vv-theme', next);
        els.themeToggle.setAttribute('aria-pressed', String(next === 'dark'));
        this.bump(els.themeToggle);
        this.syncButton();
      }
      syncButton(){
        const mode = document.documentElement.getAttribute('data-theme') || 'light';
        if (els.themeIcon) els.themeIcon.textContent = mode === 'dark' ? '☀️' : '🌙';
        if (els.themeText) els.themeText.textContent = mode === 'dark' ? 'Light mode' : 'Dark mode';
      }
      bump(el){ el.style.transform = 'scale(0.96)'; setTimeout(() => el.style.transform='', 120); }
    }

    // Particles
    class ParticleSystem {
      constructor(){ this.pool=[]; this.max = reduceMotion ? 0 : 14; this.t=0; this.anim=null; }
      init(){
        if (this.max === 0) return;
        for (let i=0;i<this.max;i++) this.spawn();
        const step = ts => { this.update(ts); this.anim = requestAnimationFrame(step); };
        this.anim = requestAnimationFrame(step);
        document.addEventListener('visibilitychange', () => {
          if (document.hidden && this.anim) cancelAnimationFrame(this.anim);
          else if (!reduceMotion) this.anim = requestAnimationFrame(step);
        }, { passive: true });
      }
      spawn(){
        const p = document.createElement('div');
        p.className = 'particle';
        p.style.left = (Math.random()*100) + '%';
        p.style.top = (100 + Math.random()*20) + 'vh';
        p.dataset.vy = (-0.1 - Math.random()*0.2).toString();
        p.dataset.x = (Math.random()*100).toString();
        els.particles.appendChild(p);
        this.pool.push(p);
      }
      update(ts){
        this.t = ts * 0.001;
        for (const p of this.pool){
          const vy = parseFloat(p.dataset.vy);
          const top = parseFloat(p.style.top);
          const nx = parseFloat(p.dataset.x) + Math.sin(this.t + top) * 0.02;
          p.dataset.x = nx.toString();
          p.style.transform = `translateX(${nx}vw)`;
          p.style.top = (top + vy) + 'vh';
          if (parseFloat(p.style.top) < -10) {
            p.style.top = (110 + Math.random()*10) + 'vh';
            p.style.left = (Math.random()*100) + '%';
          }
        }
      }
    }

    // Focus trap
    const Focus = {
      trap(container){
        const focusable = container.querySelectorAll('a[href], button:not([disabled]), textarea, input, select, [tabindex]:not([tabindex="-1"])');
        const first = focusable[0]; const last = focusable[focusable.length - 1];
        function handle(e){
          if (e.key !== 'Tab') return;
          if (e.shiftKey && document.activeElement === first) { e.preventDefault(); last.focus(); }
          else if (!e.shiftKey && document.activeElement === last) { e.preventDefault(); first.focus(); }
        }
        container.addEventListener('keydown', handle);
        return () => container.removeEventListener('keydown', handle);
      }
    };

    // Sanitizer
    function sanitize(html){
      const div = document.createElement('div');
      div.innerHTML = html || '';
      div.querySelectorAll('script, iframe, object, embed, link, style').forEach(el => el.remove());
      div.querySelectorAll('*').forEach(el => {
        [...el.attributes].forEach(attr => {
          const n = attr.name.toLowerCase();
          const v = (attr.value || '').trim().toLowerCase();
          if (n.startsWith('on') || v.startsWith('javascript:')) el.removeAttribute(attr.name);
        });
      });
      div.querySelectorAll('.subscription-widget, .subscription-widget-wrap-editor, .button-wrapper').forEach(el => el.remove());
      return div.innerHTML;
    }

    // Modals
    class ModalManager {
      constructor(){ this.releaseTrap = null; }
      init(){
        els.aboutBtn?.addEventListener('click', () => this.openAbout(), { passive: true });
        els.footerAbout?.addEventListener('click', e => { e.preventDefault(); this.openAbout(); });
        els.aboutClose?.addEventListener('click', () => this.closeAbout());
        els.aboutModal?.addEventListener('click', e => { if (e.target === els.aboutModal) this.closeAbout(); });

        els.readingClose?.addEventListener('click', () => this.closeReading());
        els.readingModal?.addEventListener('click', e => { if (e.target === els.readingModal) this.closeReading(); });

        els.prev?.addEventListener('click', () => this.prev());
        els.next?.addEventListener('click', () => this.next());

        document.addEventListener('keydown', e => this.key(e));
        els.modalBody?.addEventListener('scroll', () => this.progress(), { passive: true });

        els.copyEmailBtn?.addEventListener('click', () => this.copy(els.copyEmailBtn?.dataset.email || 'versesvibez@substack.com', els.copyEmailBtn));
      }
      lockMain(lock){
        els.appRoot?.setAttribute('aria-hidden', String(lock));
        document.body.style.overflow = lock ? 'hidden' : '';
      }
      openAbout(){
        lastFocus = document.activeElement;
        els.aboutModal.classList.add('open');
        els.aboutModal.setAttribute('aria-hidden','false');
        this.lockMain(true);
        this.releaseTrap = Focus.trap(els.aboutModal);
        els.aboutModal.focus();
      }
      closeAbout(){
        els.aboutModal.classList.remove('open');
        els.aboutModal.setAttribute('aria-hidden','true');
        this.lockMain(false);
        this.releaseTrap && this.releaseTrap();
        lastFocus?.focus();
      }
      openReading(post, idx){
        const date = post.pubDate ? new Date(post.pubDate).toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' }) : '';
        els.modalTitle.textContent = post.title || 'Untitled';
        els.modalMeta.textContent = date;
        els.modalBody.innerHTML = sanitize(post.content || post.description || '');
        els.modalBody.querySelectorAll('img').forEach(img => { img.loading='lazy'; img.decoding='async'; img.removeAttribute('width'); img.removeAttribute('height'); });

        lastFocus = document.activeElement;
        els.readingModal.classList.add('open');
        els.readingModal.setAttribute('aria-hidden','false');
        els.readingModal.dataset.index = idx;
        iModal = idx;
        els.bar.style.width = '0%';
        els.bar.setAttribute('aria-valuenow','0');
        this.lockMain(true);
        this.releaseTrap = Focus.trap(els.readingModal);
        els.readingModal.focus();
        this.updateNav();
      }
      closeReading(){
        els.readingModal.classList.remove('open');
        els.readingModal.setAttribute('aria-hidden','true');
        els.bar.style.width = '0%';
        els.bar.setAttribute('aria-valuenow','0');
        this.lockMain(false);
        this.releaseTrap && this.releaseTrap();
        lastFocus?.focus();
      }
      key(e){
        if (e.key === 'Escape') { this.closeAbout(); this.closeReading(); }
        if (els.readingModal.classList.contains('open')) {
          if (e.key === 'ArrowRight') this.next();
          if (e.key === 'ArrowLeft') this.prev();
        }
      }
      next(){ if (iModal < posts.length - 1) this.openReading(posts[iModal + 1], iModal + 1); }
      prev(){ if (iModal > 0) this.openReading(posts[iModal - 1], iModal - 1); }
      updateNav(){
        els.prev.disabled = iModal <= 0;
        els.next.disabled = iModal >= posts.length - 1;
      }
      progress(){
        const h = els.modalBody.scrollHeight - els.modalBody.clientHeight;
        const sc = h > 0 ? (els.modalBody.scrollTop / h) * 100 : 0;
        els.bar.style.width = sc + '%';
        els.bar.setAttribute('aria-valuenow', String(Math.round(sc)));
      }
      async copy(text, btn){
        const original = btn?.innerHTML;
        try { await navigator.clipboard.writeText(text);
          if (btn) { btn.innerHTML = '<span>✓</span> Copied!'; setTimeout(() => btn.innerHTML = original, 1800); }
        } catch {
          if (btn) { btn.innerHTML = text; setTimeout(() => btn.innerHTML = original, 2000); }
        }
      }
    }

    // Content
    class ContentManager {
      init(){
        els.search?.addEventListener('input', debounce(() => this.search(), 120));
        this.load();
      }
      textOnly(html){ const d=document.createElement('div'); d.innerHTML = sanitize(html||''); return d.textContent || d.innerText || ''; }
      firstImage(html){
        const d=document.createElement('div'); d.innerHTML = sanitize(html||'');
        const img = d.querySelector('img'); if (img?.src) return img.src;
        const source = d.querySelector('source[srcset]');
        if (source){ const first = (source.getAttribute('srcset')||'').split(',')[0]?.trim().split(' ')[0]; if (first) return first; }
        return null;
      }
      readTime(txt){ const w=(txt.trim().match(/\\S+/g)||[]).length; return `${Math.max(1, Math.round(w/200))} min read`; }
      vibes(title=''){ const words = title.toLowerCase().match(/[a-z]{4,}/g)||[]; return [...new Set(words.slice(0,2))]; }

      card(post, idx){
        const date = post.pubDate ? new Date(post.pubDate) : null;
        const dateStr = date ? date.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'numeric'}) : '';
        const html = post.content || post.description || '';
        const txt = this.textOnly(html);
        const img = this.firstImage(html);
        const summary = txt.length > 280 ? txt.slice(0,280) + '…' : txt;
        const rt = txt ? this.readTime(txt) : '';
        const tags = this.vibes(post.title);

        const el = document.createElement('article');
        el.className = 'card';
        el.style.transitionDelay = `${Math.min(idx,15)*100}ms`;
        el.setAttribute('aria-label', post.title || 'Poem');

        el.innerHTML = `
          ${img ? `<div class="card-thumb"><img loading="lazy" decoding="async" src="${img}" alt="" /></div>` : `<div class="card-thumb" aria-hidden="true"></div>`}
          <div class="card-content">
            <h2 class="card-title"><a href="${post.link}" target="_blank" rel="noopener">${post.title || 'Untitled'}</a></h2>
            <div class="card-meta">
              ${dateStr ? `<span>📅 ${dateStr}</span>` : '' }
              ${rt ? `<span>⏱️ ${rt}</span>` : '' }
            </div>
            <div class="card-summary">${summary}</div>
            ${tags.length ? `<div class="card-badges">${tags.map(v=>`<span class="badge">${v}</span>`).join('')}</div>` : ''}
            <div class="card-actions">
              <a href="${post.link}" target="_blank" rel="noopener">Read on Substack →</a>
              <a href="#" data-quick-read="${idx}">Quick read</a>
              <a href="#" data-share="${encodeURIComponent(post.link)}">Share</a>
            </div>
          </div>
        `;

        // events
        el.querySelector('[data-quick-read]')?.addEventListener('click', e => { e.preventDefault(); modal.openReading(post, idx); });
        const share = el.querySelector('[data-share]');
        share?.addEventListener('click', async e => {
          e.preventDefault();
          const url = post.link, title = post.title || 'Poem from Torchborne';
          try { if (navigator.share) await navigator.share({ title, url });
            else { await navigator.clipboard.writeText(url); const t = share.textContent; share.textContent='Copied ✓'; setTimeout(()=> share.textContent=t, 1500); }
          } catch {}
        });

        const im = el.querySelector('.card-thumb img');
        if (im) { if (im.complete) im.setAttribute('data-loaded','1'); else im.addEventListener('load', () => im.setAttribute('data-loaded','1')); }
        return el;
      }

      render(list){
        els.status.classList.add('hidden');
        els.grid.hidden = false;
        els.grid.innerHTML = '';
        list.forEach((p, i) => {
          const c = this.card(p, i);
          els.grid.appendChild(c);
          requestAnimationFrame(() => c.classList.add('show'));
        });
      }

      search(){
        const q = (els.search.value || '').trim().toLowerCase();
        const cards = els.grid.querySelectorAll('.card');
        if (!q) { cards.forEach(c => c.classList.remove('hidden')); return; }
        posts.forEach((p, i) => {
          const text = [p.title || '', this.textOnly(p.content || p.description || '')].join(' ').toLowerCase();
          const show = text.includes(q);
          const card = cards[i];
          if (card) card.classList.toggle('hidden', !show);
        });
      }

      async load(){
        const sources = [];
        const worker = WORKER_BASE ? WORKER_BASE + encodeURIComponent(RSS_URL) : null;
        const publicUrl = PUBLIC_BASE + encodeURIComponent(RSS_URL);
        if (worker) sources.push(worker);
        sources.push(publicUrl);

        for (const url of sources){
          try {
            const data = await this.fetchWithTimeout(url, 9000);
            const raw = Array.isArray(data?.items) ? data.items : [];
            const valid = raw.filter(p => {
              const title = (p.title || '').toLowerCase();
              const text = this.textOnly(p.content || p.description || '').trim();
              if (/coming\\s+soon/i.test(title)) return false;
              if (text.length < 50) return false;
              return true;
            });
            if (valid.length) { posts = valid; this.render(valid); return; }
          } catch(e) { /* try next source */ }
        }
        this.fail();
      }

      fetchWithTimeout(url, ms=8000){
        const ctrl = new AbortController(); const id = setTimeout(()=>ctrl.abort(), ms);
        return fetch(url, { credentials:'omit', cache:'no-store', signal: ctrl.signal })
          .then(r => { if (!r.ok) throw new Error('HTTP ' + r.status); return r.json(); })
          .finally(() => clearTimeout(id));
      }

      fail(){
        els.status.className = 'status error';
        els.status.setAttribute('role','alert');
        els.status.textContent = "Unable to load poems right now. The words are taking a little break. ☁️";
      }
    }

    // ===== INIT =====
    const theme = new ThemeManager();
    const particles = new ParticleSystem();
    const modal = new ModalManager();
    const content = new ContentManager();

    document.addEventListener('DOMContentLoaded', () => {
      theme.init();
      particles.init();
      modal.init();
      content.init();
      console.log('✨ Torchborne — ready to inspire');
    }, { passive: true });
  </script>
</body>
</html>
