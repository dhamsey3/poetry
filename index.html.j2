<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>{{ site_title or "My Substack Feed" }}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="robots" content="index,follow" />
  <meta name="description" content="Latest posts from {{ site_title or 'this publication' }}." />
  <link rel="alternate" type="application/rss+xml" title="{{ site_title or 'Feed' }}" href="{{ feed_url }}" />

  <style>
    :root{--bg:#0b0c10;--card:#0f1117;--muted:#8892a6;--text:#e6edf3;--brand:#8ab4ff;--border:rgba(255,255,255,.08)}
    *{box-sizing:border-box}
    html,body{margin:0;padding:0;background:var(--bg);color:var(--text);font:16px/1.6 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial}
    a{color:var(--brand);text-decoration:none} a:hover{text-decoration:underline}
    .wrap{max-width:880px;margin:0 auto;padding:28px 18px 40px}
    header{display:flex;gap:14px;align-items:center;justify-content:space-between;margin:8px 0 22px}
    .title a{color:var(--text);text-decoration:none}
    .subtitle{color:var(--muted);font-size:14px;margin-top:4px}
    .btn{display:inline-flex;align-items:center;gap:8px;padding:10px 14px;border:1px solid var(--border);border-radius:12px;background:linear-gradient(180deg,rgba(255,255,255,.04),rgba(255,255,255,.02));color:var(--text);text-decoration:none;font-weight:600}
    .btn:hover{border-color:rgba(138,180,255,.5)}
    .grid{display:grid;grid-template-columns:1fr;gap:14px}
    @media (min-width:720px){.grid{grid-template-columns:1fr 1fr}}
    article{border:1px solid var(--border);border-radius:16px;background:var(--card);padding:18px 16px 14px;display:flex;flex-direction:column;min-height:140px}
    h2{font-size:18px;margin:0 0 6px;line-height:1.35}
    .meta{color:var(--muted);font-size:12px;margin-bottom:10px;display:flex;gap:10px;flex-wrap:wrap}
    .summary{color:#cbd5e1;font-size:14px}
    .empty,.error{margin:22px 0;border:1px dashed var(--border);border-radius:16px;padding:18px;background:rgba(255,255,255,.03)}
    footer{margin-top:28px;color:var(--muted);font-size:12px;display:flex;justify-content:space-between;gap:10px;flex-wrap:wrap}
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div>
        <div class="title"><a href="{{ public_url }}">{{ site_title or "My Substack Feed" }}</a></div>
        <div class="subtitle">Client-side via RSS proxy • Generated {{ generated_at.strftime("%Y-%m-%d %H:%M UTC") if generated_at else "" }}</div>
      </div>
      <div style="display:flex;gap:10px;flex-wrap:wrap">
        <a class="btn" href="{{ feed_url }}" rel="noopener">View RSS</a>
        <a class="btn" href="{{ public_url.rstrip('/') + '/subscribe' }}" rel="noopener">Subscribe</a>
      </div>
    </header>

    <div id="status" class="empty">Loading posts…</div>
    <section id="posts" class="grid" hidden></section>

    <footer>
      <div>Built from <a href="{{ feed_url }}">RSS</a>. No tracking.</div>
      <div>Last updated {{ generated_at.strftime("%Y-%m-%d %H:%M UTC") if generated_at else "" }}</div>
    </footer>
  </div>

  <script>
    // Backend-configured values:
    const RSS_URL = {{ (feed_url or "https://versesvibez.substack.com/feed") | tojson }};
    const PROXY_BASE = {{ (rss_proxy_url or "https://api.rss2json.com/v1/api.json?rss_url=") | tojson }};
    const PROXY = PROXY_BASE + encodeURIComponent(RSS_URL);

    const statusEl = document.getElementById('status');
    const postsEl = document.getElementById('posts');

    function card(item){
      const pubDate = item.pubDate ? new Date(item.pubDate).toISOString().slice(0,10) : '';
      const el = document.createElement('article');
      el.innerHTML = `
        <h2><a href="${item.link}" target="_blank" rel="noopener">${item.title || 'Untitled'}</a></h2>
        <div class="meta">${pubDate ? ('Published: ' + pubDate) : ''}</div>
        <div class="summary">${item.content || item.description || ''}</div>
      `;
      return el;
    }

    fetch(PROXY, { credentials: "omit", cache: "no-store" })
      .then(r => {
        if(!r.ok) throw new Error('HTTP ' + r.status);
        return r.json();
      })
      .then(data => {
        const items = (data && Array.isArray(data.items)) ? data.items : [];
        if(items.length === 0){
          statusEl.textContent = 'No public posts found.';
          return;
        }
        statusEl.hidden = true;
        postsEl.hidden = false;
        items.forEach(it => postsEl.appendChild(card(it)));
      })
      .catch(err => {
        statusEl.className = 'error';
        statusEl.textContent = 'Failed to load feed: ' + err.message;
      });
  </script>
</body>
</html>
