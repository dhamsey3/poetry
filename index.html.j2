<!doctype html>
<html lang="en" data-theme="light">
<head>
  <meta charset="utf-8" />
  <title>Torchborne</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="robots" content="index,follow" />
  <meta name="description" content="Poetry & musings by Dami." />
  <meta name="color-scheme" content="light dark" />
  <meta name="theme-color" content="#f59e0b" />

  <!-- ===== SEO / SOCIAL ===== -->
  <!-- Set this to your deployed site (no trailing slash), e.g. https://torchborne.site -->
  <script>const SITE_URL = ""; /* e.g. "https://torchborne.site" */</script>
  <link id="canonicalLink" rel="canonical" href="/" />
  <meta property="og:title" content="Torchborne" />
  <meta property="og:description" content="Poetry & musings by Dami." />
  <meta property="og:type" content="website" />
  <meta id="ogUrl" property="og:url" content="/" />
  <meta id="ogImage" property="og:image" content="static/logo-light.png" />
  <meta name="twitter:card" content="summary_large_image">

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Playfair+Display:ital,wght@0,400;0,700;1,400&display=swap" rel="stylesheet">

  <link rel="alternate" type="application/rss+xml" title="Torchborne • Feed" href="https://versesvibez.substack.com/feed" />
  <link rel="icon" href="static/logo-light.png" />

  <style>
    /* ---------- THEME TOKENS ---------- */
    :root {
      --bg: linear-gradient(135deg, #fcf7ed 0%, #fffdf7 100%);
      --bg-solid: #fcf7ed;
      --paper: rgba(255, 253, 247, 0.93);
      --paper-hover: rgba(255, 253, 247, 0.99);
      --ink: #2e2411;
      --ink-soft: #55462a;
      --muted: #a48e6f;
      --muted-light: #d8cbb4;
      --accent: linear-gradient(135deg, #e29b39 0%, #ffd39b 100%);
      --accent-solid: #e29b39;
      --accent-2: linear-gradient(135deg, #a259f7 0%, #6857dd 100%);
      --accent-2-solid: #a259f7;
      --border: rgba(164, 142, 111, 0.13);
      --border-soft: rgba(164, 142, 111, 0.07);
      --shadow-sm: 0 2px 8px rgba(48, 34, 17, 0.07), 0 1px 3px rgba(48, 34, 17, 0.08);
      --shadow: 0 8px 28px rgba(48, 34, 17, 0.10), 0 4px 15px rgba(48, 34, 17, 0.05);
      --shadow-lg: 0 20px 60px rgba(226,155,57,0.1), 0 8px 25px rgba(162,89,247,0.05);
      --grain:
        radial-gradient(circle at 20% 25%, rgba(226,155,57,0.04) 0%, transparent 60%),
        radial-gradient(circle at 75% 65%, rgba(162,89,247,0.02) 0%, transparent 65%);
    }
    [data-theme="dark"] {
      --bg: linear-gradient(135deg, #19130a 0%, #302311 100%);
      --bg-solid: #20180f;
      --paper: rgba(44, 34, 17, 0.98);
      --paper-hover: rgba(44, 34, 17, 1);
      --ink: #f7eed6;
      --ink-soft: #dbc39b;
      --muted: #99774b;
      --muted-light: #bca57a;
      --accent: linear-gradient(135deg, #ffd39b 0%, #e29b39 100%);
      --accent-solid: #ffd39b;
      --accent-2: linear-gradient(135deg, #a259f7 0%, #6857dd 100%);
      --accent-2-solid: #a259f7;
      --border: rgba(255,211,155,0.08);
      --border-soft: rgba(255,211,155,0.04);
      --shadow-sm: 0 2px 8px rgba(226,155,57,0.06), 0 1px 3px rgba(48,34,17,0.18);
      --shadow: 0 8px 30px rgba(162,89,247,0.09), 0 4px 15px rgba(48,34,17,0.09);
      --shadow-lg: 0 20px 60px rgba(226,155,57,0.13), 0 8px 25px rgba(162,89,247,0.07);
      --grain:
        radial-gradient(circle at 30% 35%, rgba(226,155,57,0.06) 0%, transparent 65%),
        radial-gradient(circle at 80% 70%, rgba(162,89,247,0.04) 0%, transparent 70%);
    }

    /* ---------- BASE UI ---------- */
    *, *::before, *::after { box-sizing: border-box; }
    html, body { height: 100%; scroll-behavior: smooth; }
    body {
      background: var(--bg);
      background-attachment: fixed;
      color: var(--ink);
      font: 400 18px/1.75 'Crimson Text', serif;
      -webkit-font-smoothing: antialiased;
      text-rendering: optimizeLegibility;
      overflow-x: hidden;
      letter-spacing: 0.01em;
    }
    body::before { content: ''; position: fixed; inset: 0; background: var(--grain); pointer-events: none; z-index: 1; }
    .main-content { position: relative; z-index: 2; }
    a { color: var(--accent-solid); text-decoration: none; transition: color .2s; }
    a:hover, .card-title a:hover { color: var(--accent-2-solid); text-decoration: underline; }
    .wrap { max-width: 1180px; margin: 0 auto; padding: 0 22px; }

    /* Light/Dark logo swap */
    .logo-dark { display: none; }
    [data-theme="dark"] .logo-light { display: none; }
    [data-theme="dark"] .logo-dark { display: inline; }

    /* ---------- HERO ---------- */
    .hero {
      position: relative;
      min-height: 80vh;
      display: flex;
      align-items: center;
      background:
        radial-gradient(ellipse at top, rgba(226,155,57,.09) 0%, transparent 58%),
        radial-gradient(ellipse at bottom right, rgba(162,89,247,.07) 0%, transparent 72%);
      border-bottom: 1px solid var(--border-soft);
      backdrop-filter: blur(1px);
    }
    [data-theme="dark"] .hero {
      background:
        radial-gradient(ellipse at top, rgba(226,155,57,.11) 0%, transparent 60%),
        radial-gradient(ellipse at bottom right, rgba(162,89,247,.08) 0%, transparent 75%);
    }
    .hero-content { text-align: center; padding: 74px 0; }
    .brand-section { margin-bottom: 40px; }
    .brand-link { display: inline-flex; align-items: center; gap: 22px; margin-bottom: 12px; }
    .logo-img { height: 66px; border-radius: 18px; box-shadow: var(--shadow-sm); }
    .brand-name {
      font-family: 'Playfair Display', serif;
      font-weight: 700;
      font-size: clamp(2.6rem, 5vw, 4.2rem);
      background: var(--accent);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      letter-spacing: -0.01em;
    }
    .hero-tagline {
      font-family: 'Crimson Text', serif;
      font-style: italic;
      font-size: clamp(1.15rem, 2vw, 1.27rem);
      color: var(--muted);
      margin-bottom: 36px;
      opacity: 0; animation: fadeInUp 1s ease-out .5s forwards;
    }
    @keyframes fadeInUp { from { opacity: 0; transform: translateY(20px);} to { opacity: 1; transform: translateY(0);} }

    /* ---------- BUTTONS ---------- */
    .btn, .chip {
      display: inline-flex; align-items: center; gap: 10px;
      padding: 14px 28px; border: 1px solid var(--border);
      border-radius: 34px; background: var(--paper);
      color: var(--ink); font-weight: 600; font-size: 15px;
      cursor: pointer; transition: all .26s;
      box-shadow: var(--shadow-sm); position: relative; overflow: hidden;
    }
    .btn:focus-visible, .chip:focus-visible { outline: 3px solid var(--accent-2-solid); outline-offset: 2px; }
    .btn-primary {
      background: var(--accent);
      border: none;
      color: white;
      box-shadow: 0 2px 12px 0 rgba(162,89,247,0.09);
    }
    .btn:hover, .chip:hover, .btn-primary:hover {
      box-shadow: var(--shadow-lg);
      border-color: var(--accent-solid);
      background: var(--paper-hover);
      color: var(--accent-2-solid);
    }
    .btn-primary:hover { color: #fff; background: var(--accent-2); }

    /* ---------- SEARCH ---------- */
    .search-section { opacity: 0; animation: fadeInUp 1.2s ease-out 0.8s forwards;}
    .search-wrapper { position: relative; max-width: 680px; margin: 0 auto; }
    .search-input {
      width: 100%; padding: 17px 24px 17px 54px;
      border: 1.5px solid var(--border); border-radius: 50px;
      background: var(--paper);
      color: var(--ink); font-size: 16px;
      transition: border .15s, box-shadow .16s;
      box-shadow: var(--shadow-sm);
    }
    .search-input:focus-visible {
      border-color: var(--accent-solid);
      box-shadow: var(--shadow), 0 0 0 3px rgba(226,155,57,0.13);
    }
    .search-icon { position: absolute; left: 20px; top: 50%; transform: translateY(-50%); color: var(--muted); pointer-events: none;}

    /* ---------- CARDS ---------- */
    .card {
      position: relative;
      background: var(--paper);
      backdrop-filter: blur(8px);
      border: 1.2px solid var(--border);
      border-radius: 26px;
      overflow: hidden;
      transition: box-shadow .5s, border .23s, transform .23s, opacity .23s;
      box-shadow: var(--shadow-sm);
      margin-bottom: 0;
      transform: translateY(18px);
      opacity: 0;
    }
    .card.show { transform: translateY(0); opacity: 1;}
    .card:hover {
      box-shadow: var(--shadow-lg);
      border-color: var(--accent-solid);
      transform: translateY(-7px) scale(1.017);
    }
    .card-thumb { position: relative; aspect-ratio: 16/10; overflow: hidden; background: var(--accent); }
    .card-thumb img {
      width: 100%; height: 100%; object-fit: cover;
      filter: grayscale(8%) brightness(97%) blur(7px);
      transition: filter .4s, transform .4s;
    }
    .card-thumb img[data-loaded="1"] { filter: grayscale(0) blur(0);}
    .card-content { padding: 18px 18px 20px; }
    .card-title {
      font-family: 'Playfair Display', serif;
      font-weight: 500; font-size: 1.26rem; color: var(--ink);
      margin: 14px 0 10px;
    }
    .card-meta { color: var(--muted); font-size: 13px; font-family: 'Inter', sans-serif; margin-bottom: 12px; display: flex; gap: 14px;}
    .card-summary { color: var(--ink-soft); font-size: 15px; margin-bottom: 12px;}
    .card-badges { display: flex; flex-wrap: wrap; gap: 7px; margin-bottom: 13px; }
    .badge {
      border-radius: 12px; font-size: 11px; font-weight: 500;
      background: var(--accent-2); color: #fff; text-transform: lowercase; padding: 3px 12px;
    }
    .card-actions { display: flex; gap: 14px; align-items: center; }

    /* ---------- GRID ---------- */
    .posts-grid { display: grid; gap: 30px; grid-template-columns: 1fr; }
    @media (min-width: 768px) { .posts-grid { grid-template-columns: repeat(2, 1fr); } }
    @media (min-width: 1180px) { .posts-grid { grid-template-columns: repeat(3, 1fr); } }

    /* ---------- STATUS ---------- */
    .status { text-align: center; margin: 28px 0 18px; color: var(--muted); }
    .status.error { color: #a33; }

    /* ---------- PARTICLES / SHAPES / PROGRESS ---------- */
    .particles { position: fixed; inset: 0; pointer-events: none; z-index: 0; }
    .particle { position: absolute; width: 6px; height: 6px; border-radius: 50%; background: var(--muted-light); opacity: .6; }
    .floating-shapes { position: fixed; inset: 0; pointer-events: none; z-index: 0; }
    .floating-shapes .shape { position: absolute; width: 120px; height: 120px; border-radius: 50%; background: radial-gradient(circle, rgba(162,89,247,.08), transparent 70%); top: 10%; left: 6%; filter: blur(10px); }
    .floating-shapes .shape:nth-child(2){ top: 65%; left: 75%; width: 160px; height: 160px; }
    .floating-shapes .shape:nth-child(3){ top: 35%; left: 55%; width: 100px; height: 100px; }
    .progress-bar { position: fixed; top: 0; left: 0; height: 3px; width: 0; background: #a259f7; z-index: 9999; transition: width .1s linear; }

    /* ---------- MODALS ---------- */
    .modal { position: fixed; inset: 0; display: none; align-items: center; justify-content: center; background: rgba(0,0,0,.35); z-index: 1000; }
    .modal.open { display: flex; }
    .modal-content { background: var(--paper); color: var(--ink); border: 1px solid var(--border); border-radius: 20px; max-width: 820px; width: 92vw; max-height: 85vh; overflow: hidden; box-shadow: var(--shadow-lg); }
    .modal-header { padding: 16px 18px; border-bottom: 1px solid var(--border-soft); display: flex; align-items: center; gap: 12px; justify-content: space-between; }
    .modal-title { font-family: 'Playfair Display', serif; font-size: 1.3rem; margin: 0; }
    .modal-meta { color: var(--muted); font-family: 'Inter', sans-serif; font-size: 0.9rem; }
    .modal-body { padding: 18px; overflow: auto; }
    .modal-actions { display: flex; gap: 8px; }
    .modal-close { border: 0; background: transparent; font-size: 20px; cursor: pointer; padding: 8px; }

    /* ---------- FOOTER ---------- */
    .footer { margin: 48px 0; color: var(--muted); }
    .footer-content { display: flex; align-items: center; justify-content: space-between; gap: 18px; flex-wrap: wrap; }
    .footer-brand { display: flex; align-items: center; gap: 12px; }
    .footer-logo { width: 32px; height: 32px; border-radius: 8px; box-shadow: var(--shadow-sm); }
    .footer-info h3 { margin: 0; font-size: 1rem; color: var(--ink); }
    .footerCopyright { font-size: .9rem; }
    .footer-links { display: flex; gap: 10px; flex-wrap: wrap; }
    .pill { padding: 8px 12px; border: 1px solid var(--border); border-radius: 999px; background: var(--paper); }
    .pill:hover { border-color: var(--accent-solid); }
    /* ---------- ACCESSIBILITY ---------- */
    *:focus-visible { outline: 3px solid var(--accent-2-solid); outline-offset: 2px;}
  </style>
</head>
<body>
  <noscript>
    <div class="status error" role="alert">JavaScript is disabled. Some features (search, quick read) won't work. You can still read directly on Substack via the links below.</div>
  </noscript>

  <!-- Floating Shapes -->
  <div class="floating-shapes" aria-hidden="true">
    <div class="shape"></div>
    <div class="shape"></div>
    <div class="shape"></div>
  </div>

  <!-- Particles -->
  <div class="particles" id="particles" aria-hidden="true"></div>

  <!-- Progress Bar -->
  <div class="progress-bar" id="progressBar" role="progressbar" aria-live="off" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"></div>

  <div id="appRoot" class="main-content" aria-hidden="false">
    <!-- HERO -->
    <section class="hero">
      <div class="wrap">
        <div class="hero-content">
          <div class="brand-section">
            <a href="./" class="brand-link">
              <img src="static/logo-light.png" alt="Torchborne logo" class="logo-img logo-light" loading="lazy" decoding="async" />
              <img src="static/logo-dark.png" alt="" class="logo-img logo-dark" loading="lazy" decoding="async" />
              <span class="brand-name">Torchborne</span>
            </a>
            <div class="hero-tagline">where words carry the flame ✨</div>
          </div>

          <div class="hero-actions">
            <button id="themeToggle" class="chip" title="Toggle theme" aria-pressed="false">
              <span id="themeIcon" aria-hidden="true">🌓</span> <span id="themeText">Theme</span>
            </button>
            <button id="refreshBtn" class="chip" title="Refresh posts">↻ Refresh</button>
            <button id="aboutBtn" class="btn" title="About" aria-haspopup="dialog" aria-controls="aboutModal">
              <span>👋</span> About
            </button>
            <a class="btn btn-primary" id="subscribeBtn" href="https://versesvibez.substack.com/subscribe" rel="noopener">
              <span>💌</span> Subscribe
            </a>
          </div>

          <div class="search-section">
            <div class="search-wrapper">
              <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                <path d="M21 21l-4.35-4.35M10.5 18A7.5 7.5 0 1010.5 3a7.5 7.5 0 000 15z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
              </svg>
              <input id="searchInput" type="search" class="search-input" placeholder="Search through poems and musings..." aria-label="Search poems" />
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- MAIN CONTENT -->
    <main class="content">
      <div class="wrap">
        <div id="statusMessage" class="status" role="status" aria-live="polite">Gathering poems from the digital ether...</div>
        <section id="postsGrid" class="posts-grid" hidden></section>
        <button id="loadMore" class="chip" style="display:none; margin: 24px auto 0;">Load more</button>
      </div>
    </main>

    <!-- FOOTER -->
    <footer class="footer">
      <div class="wrap">
        <div class="footer-content">
          <div class="footer-brand">
            <img src="static/logo-light.png" class="footer-logo logo-light" alt="" aria-hidden="true">
            <img src="static/logo-dark.png" class="footer-logo logo-dark" alt="" aria-hidden="true">
            <div class="footer-info">
              <h3>Torchborne</h3>
              <div class="footerCopyright">© <span id="footerYear">2025</span> • Made with ❤️ and pixels</div>
            </div>
          </div>

          <nav class="footer-links" aria-label="Footer">
            <a href="#" id="footerAboutLink" class="pill">About</a>
            <a id="footerSubscribe" href="https://versesvibez.substack.com/subscribe" class="pill">Subscribe</a>
            <a id="footerSubstack" href="https://versesvibez.substack.com" target="_blank" rel="noopener" class="pill">
              <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
                <path fill="currentColor" d="M3 5h18v2H3V5zm0 4h18v6l-9-3-9 3V9z"/>
              </svg>
              Substack
            </a>
          </nav>
        </div>
      </div>
    </footer>
  </div>

  <!-- READING MODAL -->
  <div id="readingModal" class="modal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="modalTitle" aria-describedby="modalBody" tabindex="-1">
    <div class="modal-content">
      <button class="modal-close" id="readingModalClose" aria-label="Close">✕</button>
      <div class="modal-header">
        <h2 class="modal-title" id="modalTitle"></h2>
        <div class="modal-meta" id="modalMeta"></div>
        <div class="modal-actions">
          <button id="prevPost" class="chip" title="Previous (←)">← Prev</button>
          <button id="nextPost" class="chip" title="Next (→)">Next →</button>
        </div>
      </div>
      <div class="modal-body" id="modalBody"></div>
    </div>
  </div>

  <!-- ABOUT MODAL -->
  <div id="aboutModal" class="modal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="aboutTitle" tabindex="-1">
    <div class="modal-content">
      <button class="modal-close" id="aboutModalClose" aria-label="Close about">✕</button>
      <div class="modal-header">
        <div class="about-header" style="display:flex;gap:12px;align-items:center;">
          <img class="about-avatar" src="static/avatar.jpg" alt="Torchborne" onerror="this.src='static/logo-light.png'" style="width:44px;height:44px;border-radius:12px;box-shadow:var(--shadow-sm);">
          <div class="about-info">
            <h2 id="aboutTitle" class="modal-title" style="margin:0;">About Torchborne</h2>
            <p class="about-tagline" style="margin:.25rem 0 0;color:var(--muted);">Illuminating poetry, carrying the flame of words ✨</p>
          </div>
        </div>
      </div>

      <div class="modal-body">
        <div class="about-body" style="display:grid;gap:12px;">
          <p>Welcome to my little corner of the internet where I explore the tender spaces between thoughts and feelings. Here you'll find poems, musings, and little sparks of inspiration that dance through everyday moments.</p>
          <p>I believe poetry lives in the smallest gestures—the way light falls across a page, the pause between heartbeats, the stories we tell ourselves in the quiet hours. This collection gathers my public posts from Substack, made searchable and beautiful for wandering souls like yourself.</p>
        </div>

        <div class="about-cta" style="display:flex;gap:10px;margin-top:10px;flex-wrap:wrap;">
          <a class="btn btn-primary" id="aboutSubscribe" href="https://versesvibez.substack.com/subscribe" rel="noopener">
            <span>💌</span> Subscribe on Substack
          </a>
          <button id="copyEmailBtn" class="btn" data-email="versesvibez@substack.com">
            <span>📧</span> Copy Email
          </button>
        </div>

        <div class="about-links" style="display:flex;gap:10px;flex-wrap:wrap;margin-top:12px;">
          <a id="aboutSubstack" href="https://versesvibez.substack.com" target="_blank" rel="noopener" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
              <path fill="currentColor" d="M3 5h18v2H3V5zm0 4h18v6l-9-3-9 3V9z"/>
            </svg>
            Substack
          </a>
          <a href="mailto:versesvibez@substack.com" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
              <path fill="currentColor" d="M20 4H4a2 2 0 00-2 2v12a2 2 0 002 2h16a2 2 0 002-2V6a2 2 0 00-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
            </svg>
            Email
          </a>
          <a href="https://instagram.com/versesvibez" target="_blank" rel="noopener" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
              <path fill="currentColor" d="M7 2h10a5 5 0 015 5v10a5 5 0 01-5 5H7a5 5 0 01-5-5V7a5 5 0 015-5zm5 5a5 5 0 100 10 5 5 0 000-10zm6.5-.9a1.1 1.1 0 110 2.2 1.1 1.1 0 010-2.2zM12 9a3 3 0 110 6 3 3 0 010-6z"/>
            </svg>
            Instagram
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    // ===== CONFIG (no templating needed) =====
    const RSS_URL      = "https://versesvibez.substack.com/feed";
    let   WORKER_BASE  = "";         // e.g., "https://your-worker.example/?rss_url="
    const RSS2JSON_KEY = "";         // optional api_key for rss2json.com
    const MAX_ITEMS    = 50;         // how many items to request/show

    // Build public rss2json endpoint
    const PUBLIC_BASE =
      "https://api.rss2json.com/v1/api.json?"
      + (RSS2JSON_KEY ? ("api_key=" + encodeURIComponent(RSS2JSON_KEY) + "&") : "")
      + "count=" + encodeURIComponent(MAX_ITEMS) + "&rss_url=";

    function normalizeBase(base) {
      if (!base) return "";
      const hasParam = /[?&]rss_url=/.test(base);
      if (hasParam) return base;
      const hasQuery = base.includes("?");
      if (!hasQuery) return base + "?rss_url=";
      if (!/[&?]$/.test(base)) base += "&";
      return base + "rss_url=";
    }
    WORKER_BASE = normalizeBase(WORKER_BASE);

    // Apply canonical/OG using SITE_URL if provided (best for crawlers if hardcoded)
    (function setSeo(){
      const origin = SITE_URL || (location.origin || "");
      if (!origin) return;
      const can = document.getElementById('canonicalLink');
      const ogu = document.getElementById('ogUrl');
      const ogi = document.getElementById('ogImage');
      if (can) can.href = origin + location.pathname.replace(/index\.html?$/,'') || origin + "/";
      if (ogu) ogu.content = origin + location.pathname.replace(/index\.html?$/,'') || origin + "/";
      // If your logo is served here, make it absolute:
      if (ogi && !ogi.content.startsWith('http')) ogi.content = origin.replace(/\/$/,'') + '/static/logo-light.png';
      // Also update Substack links if you mirror elsewhere (optional)
      const sub = origin; // keep Substack links as-is below
    })();

    // ===== DOM =====
    const els = {
      appRoot: document.getElementById('appRoot'),
      status: document.getElementById('statusMessage'),
      grid: document.getElementById('postsGrid'),
      search: document.getElementById('searchInput'),
      bar: document.getElementById('progressBar'),
      particles: document.getElementById('particles'),
      themeToggle: document.getElementById('themeToggle'),
      themeIcon: document.getElementById('themeIcon'),
      themeText: document.getElementById('themeText'),
      refreshBtn: document.getElementById('refreshBtn'),
      loadMore: document.getElementById('loadMore'),
      aboutBtn: document.getElementById('aboutBtn'),
      aboutModal: document.getElementById('aboutModal'),
      aboutClose: document.getElementById('aboutModalClose'),
      footerAbout: document.getElementById('footerAboutLink'),
      readingModal: document.getElementById('readingModal'),
      readingClose: document.getElementById('readingModalClose'),
      modalTitle: document.getElementById('modalTitle'),
      modalMeta: document.getElementById('modalMeta'),
      modalBody: document.getElementById('modalBody'),
      prev: document.getElementById('prevPost'),
      next: document.getElementById('nextPost'),
      copyEmailBtn: document.getElementById('copyEmailBtn'),
      footerYear: document.getElementById('footerYear'),
    };

    // ===== STATE =====
    let posts = [];
    let iModal = 0;
    let lastFocus = null;
    const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    // ===== UTIL =====
    const debounce = (fn, ms=200) => { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), ms); }; };

    // Theme
    class ThemeManager {
      init(){
        const saved = localStorage.getItem('vv-theme');
        if (saved) document.documentElement.setAttribute('data-theme', saved);
        this.syncButton();
        els.themeToggle?.addEventListener('click', () => this.toggle());
      }
      toggle(){
        const cur = document.documentElement.getAttribute('data-theme') || 'light';
        const next = cur === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', next);
        localStorage.setItem('vv-theme', next);
        els.themeToggle.setAttribute('aria-pressed', String(next === 'dark'));
        this.bump(els.themeToggle);
        this.syncButton();
      }
      syncButton(){
        const mode = document.documentElement.getAttribute('data-theme') || 'light';
        els.themeToggle?.setAttribute('aria-pressed', String(mode === 'dark'));
        if (els.themeIcon) els.themeIcon.textContent = mode === 'dark' ? '☀️' : '🌙';
        if (els.themeText) els.themeText.textContent = mode === 'dark' ? 'Light mode' : 'Dark mode';
      }
      bump(el){ if(!el) return; el.style.transform = 'scale(0.96)'; setTimeout(() => el.style.transform='', 120); }
    }

    // Particles
    class ParticleSystem {
      constructor(){ this.pool=[]; this.max = reduceMotion ? 0 : 14; this.t=0; this.anim=null; }
      init(){
        if (!els.particles || this.max === 0) return;
        for (let i=0;i<this.max;i++) this.spawn();
        const step = ts => { this.update(ts); this.anim = requestAnimationFrame(step); };
        this.anim = requestAnimationFrame(step);
        document.addEventListener('visibilitychange', () => {
          if (document.hidden && this.anim) cancelAnimationFrame(this.anim);
          else if (!reduceMotion) this.anim = requestAnimationFrame(step);
        });
      }
      spawn(){
        const p = document.createElement('div');
        p.className = 'particle';
        p.style.left = (Math.random()*100) + '%';
        p.style.top = (100 + Math.random()*20) + 'vh';
        p.dataset.vy = (-0.1 - Math.random()*0.2).toString();
        p.dataset.x = (Math.random()*100).toString();
        els.particles.appendChild(p);
        this.pool.push(p);
      }
      update(ts){
        this.t = ts * 0.001;
        for (const p of this.pool){
          const vy = parseFloat(p.dataset.vy);
          const top = parseFloat(p.style.top);
          const nx = parseFloat(p.dataset.x) + Math.sin(this.t + top) * 0.02;
          p.dataset.x = nx.toString();
          p.style.transform = `translateX(${nx}vw)`;
          p.style.top = (top + vy) + 'vh';
          if (parseFloat(p.style.top) < -10) {
            p.style.top = (110 + Math.random()*10) + 'vh';
            p.style.left = (Math.random()*100) + '%';
          }
        }
      }
    }

    // Focus trap
    const Focus = {
      trap(container){
        const focusable = container.querySelectorAll('a[href], button:not([disabled]), textarea, input, select, [tabindex]:not([tabindex="-1"])');
        const first = focusable[0]; const last = focusable[focusable.length - 1];
        function handle(e){
          if (e.key !== 'Tab') return;
          if (e.shiftKey && document.activeElement === first) { e.preventDefault(); last.focus(); }
          else if (!e.shiftKey && document.activeElement === last) { e.preventDefault(); first.focus(); }
        }
        container.addEventListener('keydown', handle);
        return () => container.removeEventListener('keydown', handle);
      }
    };

    // Sanitizer
    function sanitize(html){
      const div = document.createElement('div');
      div.innerHTML = html || '';
      div.querySelectorAll('script, iframe, object, embed, link, style').forEach(el => el.remove());
      div.querySelectorAll('*').forEach(el => {
        [...el.attributes].forEach(attr => {
          const n = attr.name.toLowerCase();
          const v = (attr.value || '').trim().toLowerCase();
          if (n.startsWith('on') || v.startsWith('javascript:')) el.removeAttribute(attr.name);
        });
      });
      div.querySelectorAll('.subscription-widget, .subscription-widget-wrap-editor, .button-wrapper').forEach(el => el.remove());
      return div.innerHTML;
    }

    // Modals
    class ModalManager {
      constructor(){ this.releaseTrap = null; }
      init(){
        els.aboutBtn?.addEventListener('click', () => this.openAbout());
        els.footerAbout?.addEventListener('click', e => { e.preventDefault(); this.openAbout(); });
        els.aboutClose?.addEventListener('click', () => this.closeAbout());
        els.aboutModal?.addEventListener('click', e => { if (e.target === els.aboutModal) this.closeAbout(); });

        els.readingClose?.addEventListener('click', () => this.closeReading());
        els.readingModal?.addEventListener('click', e => { if (e.target === els.readingModal) this.closeReading(); });

        els.prev?.addEventListener('click', () => this.prev());
        els.next?.addEventListener('click', () => this.next());

        document.addEventListener('keydown', e => this.key(e));
        els.modalBody?.addEventListener('scroll', () => this.progress(), { passive: true });

        els.copyEmailBtn?.addEventListener('click', () => this.copy(els.copyEmailBtn?.dataset.email || 'versesvibez@substack.com', els.copyEmailBtn));
      }
      lockMain(lock){
        els.appRoot?.setAttribute('aria-hidden', String(lock));
        document.body.style.overflow = lock ? 'hidden' : '';
      }
      openAbout(){
        lastFocus = document.activeElement;
        els.aboutModal.classList.add('open');
        els.aboutModal.setAttribute('aria-hidden','false');
        this.lockMain(true);
        this.releaseTrap = Focus.trap(els.aboutModal);
        els.aboutModal.focus();
      }
      closeAbout(){
        els.aboutModal.classList.remove('open');
        els.aboutModal.setAttribute('aria-hidden','true');
        this.lockMain(false);
        this.releaseTrap && this.releaseTrap();
        lastFocus?.focus();
      }
      openReading(post, idx){
        const date = post.pubDate ? new Date(post.pubDate).toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' }) : '';
        els.modalTitle.textContent = post.title || 'Untitled';
        els.modalMeta.textContent = date;
        els.modalBody.innerHTML = sanitize(post.content || post.description || '');
        els.modalBody.querySelectorAll('img').forEach(img => { img.loading='lazy'; img.decoding='async'; img.removeAttribute('width'); img.removeAttribute('height'); });

        lastFocus = document.activeElement;
        els.readingModal.classList.add('open');
        els.readingModal.setAttribute('aria-hidden','false');
        els.readingModal.dataset.index = idx;
        iModal = idx;
        els.bar.style.width = '0%';
        els.bar.setAttribute('aria-valuenow','0');
        this.lockMain(true);
        this.releaseTrap = Focus.trap(els.readingModal);
        els.readingModal.focus();
        this.updateNav();
      }
      closeReading(){
        els.readingModal.classList.remove('open');
        els.readingModal.setAttribute('aria-hidden','true');
        els.bar.style.width = '0%';
        els.bar.setAttribute('aria-valuenow','0');
        this.lockMain(false);
        this.releaseTrap && this.releaseTrap();
        lastFocus?.focus();
      }
      key(e){
        if (e.key === 'Escape') { this.closeAbout(); this.closeReading(); }
        if (els.readingModal.classList.contains('open')) {
          if (e.key === 'ArrowRight') this.next();
          if (e.key === 'ArrowLeft') this.prev();
        }
      }
      next(){ if (iModal < posts.length - 1) this.openReading(posts[iModal + 1], iModal + 1); }
      prev(){ if (iModal > 0) this.openReading(posts[iModal - 1], iModal - 1); }
      updateNav(){
        els.prev.disabled = iModal <= 0;
        els.next.disabled = iModal >= posts.length - 1;
      }
      progress(){
        const h = els.modalBody.scrollHeight - els.modalBody.clientHeight;
        const sc = h > 0 ? (els.modalBody.scrollTop / h) * 100 : 0;
        els.bar.style.width = sc + '%';
        els.bar.setAttribute('aria-valuenow', String(Math.round(sc)));
      }
      async copy(text, btn){
        const original = btn?.innerHTML;
        try { await navigator.clipboard.writeText(text);
          if (btn) { btn.innerHTML = '<span>✓</span> Copied!'; setTimeout(() => btn.innerHTML = original, 1800); }
        } catch {
          if (btn) { btn.innerHTML = text; setTimeout(() => btn.innerHTML = original, 2000); }
        }
      }
    }

    // Content
    class ContentManager {
      constructor(){
        this.viewList = [];
        this.pageSize = 12;
        this.shown = 0;
      }
      init(){
        els.search?.addEventListener('input', debounce(() => this.search(), 120));
        els.refreshBtn?.addEventListener('click', () => this.load(true));
        els.loadMore?.addEventListener('click', () => this.renderNextChunk(false));
        this.load();
      }
      textOnly(html){ const d=document.createElement('div'); d.innerHTML = sanitize(html||''); return d.textContent || d.innerText || ''; }
      firstImage(html){
        const d=document.createElement('div'); d.innerHTML = sanitize(html||'');
        const img = d.querySelector('img'); if (img?.src) return img.src;
        const source = d.querySelector('source[srcset]');
        if (source){ const first = (source.getAttribute('srcset')||'').split(',')[0]?.trim().split(' ')[0]; if (first) return first; }
        return null;
      }
      readTime(txt){ const w=(txt.trim().match(/\S+/g)||[]).length; return `${Math.max(1, Math.round(w/200))} min read`; }
      vibes(title=''){ const words = title.toLowerCase().match(/[a-z]{4,}/g)||[]; return [...new Set(words.slice(0,2))]; }

      card(post, idx){
        const date = post.pubDate ? new Date(post.pubDate) : null;
        const dateStr = date ? date.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'numeric'}) : '';
        const html = post.content || post.description || '';
        const txt = this.textOnly(html);
        const img = this.firstImage(html);
        const summary = txt.length > 280 ? txt.slice(0,280) + '…' : txt;
        const rt = txt ? this.readTime(txt) : '';
        const tags = this.vibes(post.title);

        const el = document.createElement('article');
        el.className = 'card';
        el.style.transitionDelay = `${Math.min(idx,15)*100}ms`;
        el.setAttribute('aria-label', post.title || 'Poem');

        el.innerHTML = `
          ${img ? `<div class="card-thumb"><img loading="lazy" decoding="async" src="${img}" alt="" /></div>` : `<div class="card-thumb" aria-hidden="true"></div>`}
          <div class="card-content">
            <h2 class="card-title"><a href="${post.link}" target="_blank" rel="noopener">${post.title || 'Untitled'}</a></h2>
            <div class="card-meta">
              ${dateStr ? `<span>📅 ${dateStr}</span>` : '' }
              ${rt ? `<span>⏱️ ${rt}</span>` : '' }
            </div>
            <div class="card-summary">${summary}</div>
            ${tags.length ? `<div class="card-badges">${tags.map(v=>`<span class="badge">${v}</span>`).join('')}</div>` : ''}
            <div class="card-actions">
              <a href="${post.link}" target="_blank" rel="noopener">Read on Substack →</a>
              <a href="#" data-quick-read="1">Quick read</a>
              <a href="#" data-share="${encodeURIComponent(post.link)}">Share</a>
            </div>
          </div>
        `;

        el.querySelector('[data-quick-read]')?.addEventListener('click', e => { e.preventDefault(); modal.openReading(post, idx); });
        const share = el.querySelector('[data-share]');
        share?.addEventListener('click', async e => {
          e.preventDefault();
          const url = post.link, title = post.title || 'Poem from Torchborne';
          try {
            if (navigator.share) await navigator.share({ title, url });
            else { await navigator.clipboard.writeText(url); const t = share.textContent; share.textContent='Copied ✓'; setTimeout(()=> share.textContent=t, 1500); }
          } catch {}
        });

        const im = el.querySelector('.card-thumb img');
        if (im) { if (im.complete) im.setAttribute('data-loaded','1'); else im.addEventListener('load', () => im.setAttribute('data-loaded','1')); }
        return el;
      }

      render(list){
        els.grid.hidden = false;
        this.viewList = list;
        this.renderNextChunk(true);
      }

      renderNextChunk(reset=false){
        if (reset) { els.grid.innerHTML = ""; this.shown = 0; }
        const slice = this.viewList.slice(this.shown, this.shown + this.pageSize);
        slice.forEach((p) => {
          const idx = posts.indexOf(p);
          const c = this.card(p, idx >= 0 ? idx : 0);
          els.grid.appendChild(c);
          requestAnimationFrame(() => c.classList.add('show'));
        });
        this.shown += slice.length;
        els.loadMore.style.display = this.shown < this.viewList.length ? "inline-flex" : "none";
      }

      search(){
        const q = (els.search.value || '').trim().toLowerCase();
        if (!q) { this.render(posts); return; }
        const filtered = posts.filter(p => {
          const text = [p.title || '', this.textOnly(p.content || p.description || '')].join(' ').toLowerCase();
          return text.includes(q);
        });
        this.render(filtered);
      }

      async load(force=false){
        if (!RSS_URL) {
          els.status.className = 'status error';
          els.status.textContent = "Feed URL missing.";
          return;
        }
        els.status.classList.remove('hidden');
        els.status.textContent = "Gathering poems from the digital ether...";
        const sources = [];
        const worker   = WORKER_BASE ? WORKER_BASE + encodeURIComponent(RSS_URL) : null;
        const publicUrl= PUBLIC_BASE + encodeURIComponent(RSS_URL);
        if (worker) sources.push(worker + (force ? `&_=${Date.now()}` : ''));
        sources.push(publicUrl + (force ? `&_=${Date.now()}` : ''));

        for (const url of sources){
          try {
            const data = await this.fetchWithTimeout(url, 9000);
            let raw = Array.isArray(data?.items) ? data.items : [];
            if (MAX_ITEMS && Number.isFinite(+MAX_ITEMS)) raw = raw.slice(0, +MAX_ITEMS);

            const valid = raw.filter(p => {
              const title = (p.title || '');
              const text = this.textOnly(p.content || p.description || '').trim();
              if (/coming\s+soon/i.test(title)) return false;
              if ((title + ' ' + text).trim().length < 10) return false;
              return true;
            });

            if (valid.length) {
              posts = valid;
              const newest = valid
                .map(v => new Date(v.pubDate || v.pubdate || 0).getTime())
                .filter(n => !isNaN(n))
                .sort((a,b)=>b-a)[0];
              if (newest) {
                const d = new Date(newest);
                els.status.textContent = `Last updated ${d.toLocaleString([], { hour: '2-digit', minute: '2-digit', day: '2-digit', month: 'short' })}`;
              } else {
                els.status.textContent = "";
              }
              this.render(valid);
              return;
            }
          } catch(e) { /* try next source */ }
        }
        this.fail();
      }

      fetchWithTimeout(url, ms=8000){
        const ctrl = new AbortController(); const id = setTimeout(()=>ctrl.abort(), ms);
        return fetch(url, { credentials:'omit', cache:'no-store', signal: ctrl.signal })
          .then(r => { if (!r.ok) throw new Error('HTTP ' + r.status); return r.json(); })
          .finally(() => clearTimeout(id));
      }

      fail(){
        els.status.className = 'status error';
        els.status.setAttribute('role','alert');
        els.status.textContent = "Unable to load poems right now. The words are taking a little break. ☁️";
      }
    }

    // ===== INIT =====
    const theme = new ThemeManager();
    const particles = new ParticleSystem();
    const modal = new ModalManager();
    const content = new ContentManager();

    document.addEventListener('DOMContentLoaded', () => {
      // dynamic year
      if (els.footerYear) els.footerYear.textContent = String(new Date().getFullYear());
      theme.init();
      particles.init();
      modal.init();
      content.init();
      console.log('✨ Torchborne — ready to inspire');
    });
  </script>
</body>
</html>
