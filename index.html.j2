<!doctype html>
<html lang="en" data-theme="light">
<head>
  <meta charset="utf-8" />
  <title>Torchborne</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="robots" content="index,follow" />
  <meta name="description" content="Poetry & musings by Dami." />
  <meta name="color-scheme" content="light dark" />
  <meta name="theme-color" content="#8b5cf6" />

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;800;900&family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Playfair+Display:ital,wght@0,700;1,700&display=swap" rel="stylesheet">

  <link rel="icon" href="static/logo-light.png" />
  <style>
    /* ===================
       ✨ THEME TOKENS
       Modern, playful palette with soft glass and candy gradients
    =================== */
    :root{
      --bg: radial-gradient(1000px 800px at 10% -10%, #ffe8f2 0%, transparent 60%),
            radial-gradient(900px 700px at 110% 10%, #e1f5ff 0%, transparent 55%),
            linear-gradient(180deg, #fffaf4 0%, #fff 100%);
      --paper: rgba(255,255,255,0.75);
      --paper-2: rgba(255,255,255,0.6);
      --paper-3: rgba(255,255,255,0.45);
      --ink: #1a1523;
      --ink-soft: #433e57;
      --muted: #6b6880;
      --ok: #22c55e;
      --warn: #f59e0b;
      --err: #ef4444;

      --grad-1: linear-gradient(135deg, #8b5cf6 0%, #f472b6 45%, #fb923c 100%);
      --grad-2: linear-gradient(135deg, #06b6d4 0%, #a78bfa 100%);
      --grad-3: linear-gradient(135deg, #22c55e 0%, #84cc16 100%);

      --border: rgba(139,92,246,0.22);
      --border-soft: rgba(139,92,246,0.12);
      --shadow-sm: 0 4px 16px rgba(17,12,34,0.06);
      --shadow:    0 18px 60px rgba(17,12,34,0.10);
      --shadow-lg: 0 36px 90px rgba(17,12,34,0.16);

      --ring: 0 0 0 6px rgba(139,92,246,0.18);
      --radius-xl: 26px;
      --radius-xxl: 34px;
    }
    [data-theme="dark"]{
      --bg: radial-gradient(1000px 800px at -10% -20%, #251833 0%, transparent 60%),
            radial-gradient(900px 700px at 110% 0%, #1a2739 0%, transparent 55%),
            linear-gradient(180deg, #0e0b14 0%, #0b0a12 100%);
      --paper: rgba(19,16,25,0.72);
      --paper-2: rgba(19,16,25,0.55);
      --paper-3: rgba(19,16,25,0.4);
      --ink: #faf7ff;
      --ink-soft: #d7d0e8;
      --muted: #a29cbc;
      --border: rgba(167,139,250,0.24);
      --border-soft: rgba(167,139,250,0.12);
      --ring: 0 0 0 6px rgba(167,139,250,0.2);
      --shadow: 0 20px 80px rgba(6,5,11,0.65);
      --shadow-lg: 0 40px 120px rgba(6,5,11,0.8);
    }

    /* =============== BASE =============== */
    *,*::before,*::after{ box-sizing: border-box; }
    html,body{ height:100%; }
    body{
      margin:0; color:var(--ink);
      background: var(--bg);
      background-attachment: fixed;
      font: 500 17px/1.75 'Inter', system-ui, -apple-system, 'Segoe UI', sans-serif;
      -webkit-font-smoothing: antialiased; text-rendering: optimizeLegibility;
      overflow-x: hidden;
    }
    a{ color: inherit; text-decoration: none; }
    a:focus-visible, button:focus-visible, input:focus-visible { outline: none; box-shadow: var(--ring); border-radius: 14px; }
    .wrap{ max-width: 1200px; margin: 0 auto; padding: 0 22px; }

    /* =============== NAV =============== */
    .nav {
      position: sticky; top: 0; z-index: 50;
      backdrop-filter: saturate(1.2) blur(10px);
      background: linear-gradient(180deg, var(--paper), var(--paper-2));
      border-bottom: 1px solid var(--border-soft);
    }
    .nav-inner{ display:flex; align-items:center; justify-content:space-between; gap:16px; padding: 12px 0; }
    .brand { display:flex; align-items:center; gap:12px; }
    .logo { width:36px; height:36px; border-radius:12px; box-shadow: var(--shadow-sm); }
    .wordmark {
      font-family:'Playfair Display', serif; font-weight:700;
      font-size: clamp(1.2rem, 2.6vw, 1.6rem);
      background: var(--grad-1); -webkit-background-clip:text; background-clip:text; color: transparent;
      letter-spacing: -0.02em;
    }

    .nav-actions{ display:flex; gap:10px; align-items:center; }
    .chip, .btn {
      display:inline-flex; align-items:center; gap:10px; cursor:pointer;
      padding: 10px 16px; border-radius: 999px; border: 1px solid var(--border);
      background: var(--paper); box-shadow: var(--shadow-sm); transition: transform .12s ease, box-shadow .2s ease;
      font-weight: 600; font-size: 14px;
    }
    .btn-primary{ border: 0; background: var(--grad-1); color: #fff; }
    .chip:hover, .btn:hover{ transform: translateY(-2px); box-shadow: var(--shadow); }
    .btn-primary:hover{ box-shadow: var(--shadow-lg); }

    /* =============== HERO =============== */
    .hero { position: relative; padding: 72px 0 40px; }
    .title-wrap { text-align:center; }
    .brand-badge { display:inline-grid; place-items:center; width:84px; height:84px; margin: 4px auto 14px; border-radius: 22px; background: var(--paper-2); border:1px solid var(--border); box-shadow: var(--shadow-sm); }
    .brand-badge img{ width:52px; height:52px; border-radius:14px; }
    .title {
      font-family:'Playfair Display', serif; font-weight:900;
      font-size: clamp(2.4rem, 6vw, 4.4rem);
      letter-spacing: -0.02em; line-height: 1.06;
      background: var(--grad-2); -webkit-background-clip:text; background-clip:text; color: transparent;
      margin: 10px 0 8px;
    }
    .tagline { font-family:'Crimson Text', serif; font-style: italic; color: var(--muted); font-size: clamp(1.05rem, 2.4vw, 1.25rem); }

    .hero-actions { display:flex; gap:12px; justify-content:center; flex-wrap:wrap; margin: 26px 0 6px; }

    /* =============== SEARCH =============== */
    .search { margin: 28px auto 0; max-width: 720px; position: relative; }
    .search input{
      width:100%; padding: 18px 20px 18px 54px; border-radius: 999px; border:1px solid var(--border);
      background: var(--paper); color: var(--ink); font-size: 16px; box-shadow: var(--shadow-sm);
      transition: box-shadow .2s ease, transform .08s ease;
    }
    .search input:focus { box-shadow: var(--shadow), var(--ring); transform: translateY(-1px); }
    .search svg{ position:absolute; left:18px; top:50%; transform: translateY(-50%); opacity:.65; }

    /* =============== STATUS / GRID =============== */
    .status { text-align:center; color: var(--muted); padding: 28px 0 10px; font-family: 'Crimson Text', serif; font-size: 18px; }
    .status.error { color: #ef4444; }

    .posts-grid { display:grid; grid-template-columns: 1fr; gap: 26px; padding: 28px 0 60px; }
    @media (min-width: 760px){ .posts-grid{ grid-template-columns: repeat(2, minmax(0,1fr)); } }
    @media (min-width: 1140px){ .posts-grid{ grid-template-columns: repeat(3, minmax(0,1fr)); } }

    /* =============== CARD =============== */
    .card { position:relative; border-radius: var(--radius-xl); overflow:hidden; border:1px solid var(--border);
            background: linear-gradient(180deg, var(--paper) 0%, var(--paper-2) 100%);
            box-shadow: var(--shadow-sm); transform: translateY(14px); opacity: 0;
            transition: transform .25s cubic-bezier(.2,.8,.2,1), box-shadow .25s, opacity .25s; }
    .card.show{ transform: translateY(0); opacity: 1; }
    .card:hover{ transform: translateY(-6px) scale(1.015); box-shadow: var(--shadow); }

    .card-thumb{ position:relative; aspect-ratio: 16/10; overflow:hidden; background: var(--paper-3); }
    .card-thumb::after{ content:""; position:absolute; inset:0; background: linear-gradient(180deg, transparent 60%, rgba(0,0,0,.06) 100%); }
    .card-thumb img{ width:100%; height:100%; object-fit: cover; filter: saturate(1.05) contrast(1.02) blur(8px); transition: filter .6s ease, transform .6s ease; }
    .card-thumb img[data-loaded="1"]{ filter: none; }
    .card:hover .card-thumb img{ transform: scale(1.04); }

    .card-content{ padding: 18px 18px 20px; }
    .card-title{ font-family:'Playfair Display', serif; letter-spacing:-.01em; font-size: 1.25rem; margin: 10px 0; }
    .card-title a{ background: linear-gradient(currentColor,currentColor) left bottom/0 2px no-repeat; transition: background-size .25s ease; }
    .card-title a:hover{ background-size: 100% 2px; }

    .card-meta{ display:flex; gap: 12px; color: var(--muted); font-size: 12.5px; font-weight:600; }
    .card-summary{ color: var(--ink-soft); font-size: 14.5px; margin: 10px 0 14px; line-height: 1.7; min-height: 3.6em; }

    .card-badges{ display:flex; flex-wrap:wrap; gap: 8px; margin-bottom: 12px; }
    .badge{ display:inline-flex; align-items:center; gap:6px; padding: 4px 10px; border-radius: 999px; font-size: 11px; font-weight: 700; color:#fff; background: var(--grad-2); }
    .badge[data-b="fire"]{ background: var(--grad-1); }
    .badge[data-b="water"]{ background: var(--grad-2); }
    .badge[data-b="earth"]{ background: var(--grad-3); }

    .card-actions{ display:flex; gap: 14px; align-items:center; }
    .card-actions a{ font-weight:700; font-size: 13.5px; color: var(--muted); }
    .card-actions a:hover{ color: #8b5cf6; }

    /* =============== MODALS =============== */
    .modal { position: fixed; inset: 0; display: none; align-items: center; justify-content: center; z-index: 60; }
    .modal.open{ display:flex; }
    .modal::before{ content:""; position:absolute; inset:0; backdrop-filter: blur(10px) saturate(1.1); background: rgba(0,0,0,.35); }
    .modal-content{ position:relative; background: linear-gradient(180deg, var(--paper) 0%, var(--paper-2) 100%); border:1px solid var(--border); border-radius: var(--radius-xxl); width:min(900px,92vw); max-height:86vh; overflow:hidden; box-shadow: var(--shadow-lg); transform: translateY(10px) scale(.98); transition: transform .25s ease; }
    .modal.open .modal-content{ transform: translateY(0) scale(1); }
    .modal-header{ display:flex; align-items:flex-start; justify-content: space-between; gap:16px; padding: 20px 20px 0; }
    .modal-title{ font-family:'Playfair Display', serif; font-size: clamp(1.4rem, 2.8vw, 1.9rem); margin: 0; }
    .modal-meta{ color: var(--muted); font-size: 13px; margin-top: 4px; }
    .modal-body{ padding: 8px 20px 20px; overflow:auto; max-height: 64vh; font-family: 'Crimson Text', serif; font-size: 18px; line-height: 1.9; color: var(--ink-soft); }
    .modal-body img{ max-width:100%; height:auto; border-radius: 14px; }
    .modal-close{ position:absolute; top: 10px; right: 10px; width: 40px; height: 40px; border-radius: 999px; display:grid; place-items:center; border:1px solid var(--border); background: var(--paper); cursor:pointer; }

    .modal-actions{ display:flex; gap: 8px; }
    .chip.small{ padding: 8px 12px; font-size: 12.5px; }

    /* =============== FOOTER =============== */
    .footer{ padding: 40px 0; border-top: 1px solid var(--border-soft); background: linear-gradient(180deg, var(--paper), var(--paper-2)); }
    .footer-inner{ display:flex; align-items:center; justify-content:space-between; gap: 16px; flex-wrap: wrap; }
    .footer-left{ display:flex; align-items:center; gap: 10px; }
    .footer-logo{ width:28px; height:28px; border-radius:8px; }
    .footer h3{ margin:0; font-size: 1rem; }
    .footer .sub{ color: var(--muted); font-size: 13px; }
    .footer .links{ display:flex; gap: 10px; flex-wrap: wrap; }

    /* =============== FUN BITS =============== */
    .progress-bar{ position: fixed; top:0; left:0; height:3px; width:0%; z-index:70; background: var(--grad-2); box-shadow: 0 0 18px rgba(167,139,250,.55); }
    .particles{ position: fixed; inset: 0; pointer-events:none; z-index: 0; }
    .particle{ position:absolute; font-size: 16px; filter: drop-shadow(0 2px 6px rgba(0,0,0,.12)); opacity:.85; }

    @media (max-width: 720px){
      .title{ font-size: clamp(2.2rem, 10vw, 3.2rem); }
      .nav-inner{ padding: 10px 0; }
      .modal-body{ max-height: 58vh; }
    }
  </style>
</head>
<body>
  <!-- Sticky / Glassy Nav -->
  <header class="nav">
    <div class="wrap nav-inner">
      <div class="brand">
        <img class="logo" src="static/logo-light.png" alt="Torchborne"/>
        <div class="wordmark">Torchborne</div>
      </div>
      <div class="nav-actions">
        <button id="themeToggle" class="chip" aria-pressed="false" title="Toggle theme">🌓 Theme</button>
        <button id="refreshBtn" class="chip" title="Refresh posts">↻ Refresh</button>
        <a id="navSubscribe" class="btn btn-primary" href="https://versesvibez.substack.com/subscribe" rel="noopener">💌 Subscribe</a>
      </div>
    </div>
  </header>

  <!-- Hero -->
  <section class="hero">
    <div class="wrap title-wrap">
      <div class="brand-badge"><img src="static/logo-light.png" alt="Torchborne"/></div>
      <h1 class="title">where words carry the flame ✨</h1>
      <p class="tagline">Poems, sparks and gentle musings — gathered beautifully from Substack.</p>

      <div class="hero-actions">
        <div class="search" role="search">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" aria-hidden="true">
            <path d="M21 21l-4.35-4.35M10.5 18A7.5 7.5 0 1010.5 3a7.5 7.5 0 000 15z" stroke="currentColor" stroke-width="1.6" stroke-linecap="round"/>
          </svg>
          <input id="searchInput" type="search" placeholder="Search poems & musings…" aria-label="Search poems"/>
        </div>
      </div>
    </div>
  </section>

  <!-- Progress Bar -->
  <div class="progress-bar" id="progressBar" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"></div>

  <!-- Main Content -->
  <main class="wrap">
    <div id="statusMessage" class="status" role="status" aria-live="polite">Gathering poems from the digital ether…</div>
    <section id="postsGrid" class="posts-grid" hidden></section>
    <div style="display:flex;justify-content:center;">
      <button id="loadMore" class="btn" style="display:none;">Show more ✨</button>
    </div>
  </main>

  <!-- Reading Modal -->
  <div id="readingModal" class="modal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="modalTitle" aria-describedby="modalBody" tabindex="-1">
    <div class="modal-content">
      <button class="modal-close" id="readingModalClose" aria-label="Close">✕</button>
      <div class="modal-header">
        <div>
          <h2 class="modal-title" id="modalTitle"></h2>
          <div class="modal-meta" id="modalMeta"></div>
        </div>
        <div class="modal-actions">
          <button id="prevPost" class="chip small" title="Previous (←)">← Prev</button>
          <button id="nextPost" class="chip small" title="Next (→)">Next →</button>
        </div>
      </div>
      <div class="modal-body" id="modalBody"></div>
    </div>
  </div>

  <!-- Footer -->
  <footer class="footer">
    <div class="wrap footer-inner">
      <div class="footer-left">
        <img class="footer-logo" src="static/logo-light.png" alt="" aria-hidden="true"/>
        <div>
          <h3>Torchborne</h3>
          <div class="sub">© <span id="footerYear">2025</span> • Made with ❤️ and pixels</div>
        </div>
      </div>
      <div class="links" aria-label="Footer">
        <a class="chip" id="footerAboutLink" href="#">About</a>
        <a class="chip" href="https://versesvibez.substack.com/subscribe">Subscribe</a>
        <a class="chip" href="https://versesvibez.substack.com" target="_blank" rel="noopener">Substack ↗</a>
      </div>
    </div>
  </footer>

  <!-- Particles (fun emoji) -->
  <div class="particles" id="particles" aria-hidden="true"></div>

  <!-- About Modal -->
  <div id="aboutModal" class="modal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="aboutTitle" tabindex="-1">
    <div class="modal-content">
      <button class="modal-close" id="aboutModalClose" aria-label="Close about">✕</button>
      <div class="modal-header">
        <div>
          <h2 id="aboutTitle" class="modal-title">About Torchborne</h2>
          <div class="modal-meta">Illuminating poetry, carrying the flame of words ✨</div>
        </div>
      </div>
      <div class="modal-body">
        <p>Welcome to my little corner of the internet where I explore the tender spaces between thoughts and feelings. Here you'll find poems, musings, and little sparks of inspiration that dance through everyday moments.</p>
        <p>This page fetches my public posts from Substack and wraps them in a calm, playful reading experience with search, quick-read, and dark mode.</p>
        <div style="display:flex;gap:10px;flex-wrap:wrap;margin-top:8px;">
          <a class="btn btn-primary" href="https://versesvibez.substack.com/subscribe" rel="noopener">💌 Subscribe on Substack</a>
          <a class="btn" href="mailto:versesvibez@substack.com">📧 Email</a>
          <a class="btn" href="https://instagram.com/versesvibez" target="_blank" rel="noopener">📷 Instagram</a>
        </div>
      </div>
    </div>
  </div>

  <script>
    // ========= CONFIG (standalone) =========
    const RSS_URL      = "https://versesvibez.substack.com/feed";
    let   WORKER_BASE  = "";         // e.g., "https://your-worker.example/?rss_url="
    const RSS2JSON_KEY = "";         // optional api_key for rss2json.com
    const MAX_ITEMS    = 50;

    const PUBLIC_BASE =
      "https://api.rss2json.com/v1/api.json?"
      + (RSS2JSON_KEY ? ("api_key=" + encodeURIComponent(RSS2JSON_KEY) + "&") : "")
      + "count=" + encodeURIComponent(MAX_ITEMS) + "&rss_url=";

    function normalizeBase(base) {
      if (!base) return "";
      const hasParam = /[?&]rss_url=/.test(base);
      if (hasParam) return base;
      const hasQuery = base.includes("?");
      if (!hasQuery) return base + "?rss_url=";
      if (!/[&?]$/.test(base)) base += "&";
      return base + "rss_url=";
    }
    WORKER_BASE = normalizeBase(WORKER_BASE);

    // ========= DOM =========
    const els = {
      appRoot: document.body,
      status: document.getElementById('statusMessage'),
      grid: document.getElementById('postsGrid'),
      search: document.getElementById('searchInput'),
      bar: document.getElementById('progressBar'),
      particles: document.getElementById('particles'),
      themeToggle: document.getElementById('themeToggle'),
      refreshBtn: document.getElementById('refreshBtn'),
      loadMore: document.getElementById('loadMore'),
      aboutBtn: document.getElementById('footerAboutLink'),
      aboutModal: document.getElementById('aboutModal'),
      aboutClose: document.getElementById('aboutModalClose'),
      readingModal: document.getElementById('readingModal'),
      readingClose: document.getElementById('readingModalClose'),
      modalTitle: document.getElementById('modalTitle'),
      modalMeta: document.getElementById('modalMeta'),
      modalBody: document.getElementById('modalBody'),
      prev: document.getElementById('prevPost'),
      next: document.getElementById('nextPost'),
      footerYear: document.getElementById('footerYear'),
    };

    // ========= STATE =========
    let posts = [];
    let iModal = 0;
    let lastFocus = null;
    const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    // ========= UTIL =========
    const debounce = (fn, ms=200) => { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), ms); }; };

    async function fetchTextWithTimeout(url, ms = 10000) {
      const ctrl = new AbortController(); const id = setTimeout(() => ctrl.abort(), ms);
      try {
        const r = await fetch(url, { signal: ctrl.signal, cache: 'no-store', credentials: 'omit' });
        if (!r.ok) throw new Error('HTTP ' + r.status);
        return await r.text();
      } finally { clearTimeout(id); }
    }

    async function fetchRssNative(feedUrl){
      // For production, swap this for your own worker endpoint
      const proxy = "https://cors.isomorphic-git.org/";
      const url = proxy + feedUrl;
      const xmlText = await fetchTextWithTimeout(url, 12000);
      const doc = new DOMParser().parseFromString(xmlText, "application/xml");
      if (doc.querySelector("parsererror")) throw new Error("XML parse error");

      let items = [...doc.querySelectorAll('channel > item')].map(item => {
        const title = item.querySelector('title')?.textContent?.trim() || '';
        const link  = item.querySelector('link')?.textContent?.trim() || '';
        const pub   = item.querySelector('pubDate')?.textContent?.trim() || '';
        const desc  = item.querySelector('content\\:encoded, encoded, description')?.textContent || '';
        return { title, link, pubDate: pub, description: desc, content: desc };
      });

      if (!items.length) {
        items = [...doc.querySelectorAll('feed > entry')].map(entry => {
          const title = entry.querySelector('title')?.textContent?.trim() || '';
          const linkEl= entry.querySelector('link[rel="alternate"]') || entry.querySelector('link');
          const link  = linkEl?.getAttribute('href') || '';
          const pub   = entry.querySelector('updated, published')?.textContent?.trim() || '';
          const content= entry.querySelector('content, summary')?.textContent || '';
          return { title, link, pubDate: pub, description: content, content };
        });
      }
      return items.filter(i => (i.title + ' ' + (i.description||'')).trim().length >= 10);
    }

    // Theme
    class ThemeManager {
      init(){
        const saved = localStorage.getItem('vv-theme');
        if (saved) document.documentElement.setAttribute('data-theme', saved);
        this.sync();
        els.themeToggle?.addEventListener('click', () => this.toggle());
      }
      toggle(){
        const cur = document.documentElement.getAttribute('data-theme') || 'light';
        const next = cur === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', next);
        localStorage.setItem('vv-theme', next);
        this.sync();
        Fun.sparkle();
      }
      sync(){ els.themeToggle?.setAttribute('aria-pressed', String((document.documentElement.getAttribute('data-theme')||'light')==='dark')); }
    }

    // Fun bits: emoji particles on theme toggle
    const Fun = {
      emojis: ['✨','💫','🪄','🔥','🌙','🌟','🧡'],
      sparkle(){
        if (!els.particles || reduceMotion) return;
        for (let i=0;i<10;i++) setTimeout(()=> this.drop(), i*40);
      },
      drop(){
        const e = document.createElement('div');
        e.className = 'particle';
        e.textContent = this.emojis[(Math.random()*this.emojis.length)|0];
        e.style.left = (10 + Math.random()*80) + 'vw';
        e.style.top  = '-5vh';
        e.style.transform = `rotate(${(Math.random()*40-20)|0}deg)`;
        e.style.fontSize = (16 + Math.random()*14) + 'px';
        els.particles.appendChild(e);
        const vy = 0.2 + Math.random()*0.25;
        const vx = (Math.random()*0.3 - 0.15);
        let y = -5, x = parseFloat(e.style.left);
        const step = () => {
          y += vy; x += vx; e.style.top = y + 'vh'; e.style.left = x + 'vw';
          if (y < 110) requestAnimationFrame(step); else e.remove();
        }; step();
      }
    };

    // Focus trap
    const Focus = {
      trap(container){
        const focusable = container.querySelectorAll('a[href], button:not([disabled]), textarea, input, select, [tabindex]:not([tabindex="-1"])');
        const first = focusable[0]; const last = focusable[focusable.length - 1];
        function handle(e){
          if (e.key !== 'Tab') return;
          if (e.shiftKey && document.activeElement === first) { e.preventDefault(); last.focus(); }
          else if (!e.shiftKey && document.activeElement === last) { e.preventDefault(); first.focus(); }
        }
        container.addEventListener('keydown', handle);
        return () => container.removeEventListener('keydown', handle);
      }
    };

    function sanitize(html){
      const div = document.createElement('div');
      div.innerHTML = html || '';
      div.querySelectorAll('script, iframe, object, embed, link, style').forEach(el => el.remove());
      div.querySelectorAll('*').forEach(el => {
        [...el.attributes].forEach(attr => {
          const n = attr.name.toLowerCase();
          const v = (attr.value || '').trim().toLowerCase();
          if (n.startsWith('on') || v.startsWith('javascript:')) el.removeAttribute(attr.name);
        });
      });
      div.querySelectorAll('.subscription-widget, .subscription-widget-wrap-editor, .button-wrapper').forEach(el => el.remove());
      return div.innerHTML;
    }

    class ModalManager {
      constructor(){ this.releaseTrap = null; }
      init(){
        document.getElementById('aboutModalClose')?.addEventListener('click', () => this.closeAbout());
        els.aboutBtn?.addEventListener('click', e => { e.preventDefault(); this.openAbout(); });

        els.readingClose?.addEventListener('click', () => this.closeReading());
        els.readingModal?.addEventListener('click', e => { if (e.target === els.readingModal) this.closeReading(); });

        els.prev?.addEventListener('click', () => this.prev());
        els.next?.addEventListener('click', () => this.next());
        document.addEventListener('keydown', e => this.key(e));
        els.modalBody?.addEventListener('scroll', () => this.progress(), { passive: true });
      }
      lockMain(lock){ document.body.style.overflow = lock ? 'hidden' : ''; }
      openAbout(){
        lastFocus = document.activeElement;
        els.aboutModal.classList.add('open');
        this.lockMain(true);
        this.releaseTrap = Focus.trap(els.aboutModal);
        els.aboutModal.focus();
      }
      closeAbout(){
        els.aboutModal.classList.remove('open');
        this.lockMain(false); this.releaseTrap && this.releaseTrap(); lastFocus?.focus();
      }
      openReading(post, idx){
        const date = post.pubDate ? new Date(post.pubDate).toLocaleDateString(undefined, { year:'numeric', month:'long', day:'numeric' }) : '';
        els.modalTitle.textContent = post.title || 'Untitled';
        els.modalMeta.textContent = date;
        els.modalBody.innerHTML = sanitize(post.content || post.description || '');
        els.modalBody.querySelectorAll('img').forEach(img => { img.loading='lazy'; img.decoding='async'; img.removeAttribute('width'); img.removeAttribute('height'); });
        lastFocus = document.activeElement;
        els.readingModal.classList.add('open');
        els.readingModal.dataset.index = idx; iModal = idx;
        els.bar.style.width = '0%'; els.bar.setAttribute('aria-valuenow','0');
        this.lockMain(true); this.releaseTrap = Focus.trap(els.readingModal); els.readingModal.focus();
        this.updateNav();
      }
      closeReading(){
        els.readingModal.classList.remove('open');
        els.bar.style.width = '0%'; els.bar.setAttribute('aria-valuenow','0');
        this.lockMain(false); this.releaseTrap && this.releaseTrap(); lastFocus?.focus();
      }
      key(e){ if (e.key==='Escape') { this.closeAbout(); this.closeReading(); }
        if (els.readingModal.classList.contains('open')){ if (e.key==='ArrowRight') this.next(); if (e.key==='ArrowLeft') this.prev(); } }
      next(){ if (iModal < posts.length - 1) this.openReading(posts[iModal + 1], iModal + 1); }
      prev(){ if (iModal > 0) this.openReading(posts[iModal - 1], iModal - 1); }
      updateNav(){ els.prev.disabled = iModal <= 0; els.next.disabled = iModal >= posts.length - 1; }
      progress(){ const h = els.modalBody.scrollHeight - els.modalBody.clientHeight; const sc = h>0 ? (els.modalBody.scrollTop / h) * 100 : 0; els.bar.style.width = sc + '%'; els.bar.setAttribute('aria-valuenow', String(Math.round(sc))); }
    }

    class ContentManager {
      constructor(){ this.viewList=[]; this.pageSize=12; this.shown=0; }
      init(){
        els.search?.addEventListener('input', debounce(() => this.search(), 120));
        document.getElementById('refreshBtn')?.addEventListener('click', () => this.load(true));
        els.loadMore?.addEventListener('click', () => this.renderNextChunk(false));
        this.load();
      }
      textOnly(html){ const d=document.createElement('div'); d.innerHTML = sanitize(html||''); return d.textContent || d.innerText || ''; }
      firstImage(html){ const d=document.createElement('div'); d.innerHTML = sanitize(html||''); const img = d.querySelector('img'); if (img?.src) return img.src; const source = d.querySelector('source[srcset]'); if (source){ const first = (source.getAttribute('srcset')||'').split(',')[0]?.trim().split(' ')[0]; if (first) return first; } return null; }
      readTime(txt){ const w=(txt.trim().match(/\S+/g)||[]).length; return `${Math.max(1, Math.round(w/200))} min read`; }
      vibes(title=''){ const words = title.toLowerCase().match(/[a-z]{4,}/g)||[]; return [...new Set(words.slice(0,2))]; }
      vibeKey(title=''){ const t = title.toLowerCase(); if(/fire|flame|burn|gold|sun/.test(t)) return 'fire'; if(/sea|blue|moon|night|sky|rain/.test(t)) return 'water'; return 'earth'; }

      card(post, idx){
        const date = post.pubDate ? new Date(post.pubDate) : null;
        const dateStr = date ? date.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'numeric'}) : '';
        const html = post.content || post.description || '';
        const txt = this.textOnly(html);
        const img = this.firstImage(html);
        const summary = txt.length > 260 ? txt.slice(0,260) + '…' : txt;
        const rt = txt ? this.readTime(txt) : '';
        const tags = this.vibes(post.title);
        const vibe = this.vibeKey(post.title||'');

        const el = document.createElement('article');
        el.className = 'card';
        el.style.transitionDelay = `${Math.min(idx,15)*60}ms`;
        el.setAttribute('aria-label', post.title || 'Poem');

        el.innerHTML = `
          ${img ? `<div class="card-thumb"><img loading="lazy" decoding="async" src="${img}" alt="" /></div>` : `<div class="card-thumb" aria-hidden="true"></div>`}
          <div class="card-content">
            <h2 class="card-title"><a href="${post.link}" target="_blank" rel="noopener">${post.title || 'Untitled'}</a></h2>
            <div class="card-meta">
              ${dateStr ? `<span>📅 ${dateStr}</span>` : '' }
              ${rt ? `<span>⏱️ ${rt}</span>` : '' }
            </div>
            <div class="card-summary">${summary}</div>
            ${tags.length ? `<div class="card-badges">${tags.map(v=>`<span class="badge" data-b="${vibe}">${vibe==='fire'?'🔥':vibe==='water'?'🌙':'🌿'} ${v}</span>`).join('')}</div>` : ''}
            <div class="card-actions">
              <a href="${post.link}" target="_blank" rel="noopener">Read on Substack ↗</a>
              <a href="#" data-quick-read="1">Quick read</a>
              <a href="#" data-share="${encodeURIComponent(post.link)}">Share</a>
            </div>
          </div>
        `;

        el.querySelector('[data-quick-read]')?.addEventListener('click', e => { e.preventDefault(); modal.openReading(post, idx); });
        const share = el.querySelector('[data-share]');
        share?.addEventListener('click', async e => {
          e.preventDefault();
          const url = post.link, title = post.title || 'Poem from Torchborne';
          try { if (navigator.share) await navigator.share({ title, url }); else { await navigator.clipboard.writeText(url); const t = share.textContent; share.textContent='Copied ✓'; setTimeout(()=> share.textContent=t, 1200); } } catch {}
        });

        const im = el.querySelector('.card-thumb img');
        if (im) { if (im.complete) im.setAttribute('data-loaded','1'); else im.addEventListener('load', () => im.setAttribute('data-loaded','1')); }
        return el;
      }

      render(list){ els.grid.hidden = false; this.viewList = list; this.renderNextChunk(true); }
      renderNextChunk(reset=false){
        if (reset) { els.grid.innerHTML = ""; this.shown = 0; }
        const slice = this.viewList.slice(this.shown, this.shown + this.pageSize);
        slice.forEach((p) => { const idx = posts.indexOf(p); const c = this.card(p, idx >= 0 ? idx : 0); els.grid.appendChild(c); requestAnimationFrame(() => c.classList.add('show')); });
        this.shown += slice.length; els.loadMore.style.display = this.shown < this.viewList.length ? "inline-flex" : "none";
      }

      search(){ const q = (els.search.value || '').trim().toLowerCase(); if (!q) { this.render(posts); return; } const filtered = posts.filter(p => { const text = [p.title || '', this.textOnly(p.content || p.description || '')].join(' ').toLowerCase(); return text.includes(q); }); this.render(filtered); }

      async load(force=false){
        els.status.textContent = "Gathering poems from the digital ether…";
        const sources = []; const worker = WORKER_BASE ? WORKER_BASE + encodeURIComponent(RSS_URL) : null; const publicUrl = PUBLIC_BASE + encodeURIComponent(RSS_URL);
        if (worker) sources.push(worker + (force ? `&_=${Date.now()}` : '')); sources.push(publicUrl + (force ? `&_=${Date.now()}` : ''));

        for (const url of sources){
          try {
            const data = await this.fetchWithTimeout(url, 9000);
            let raw = Array.isArray(data?.items) ? data.items : [];
            if (MAX_ITEMS && Number.isFinite(+MAX_ITEMS)) raw = raw.slice(0, +MAX_ITEMS);
            const valid = raw.filter(p => { const title = (p.title || ''); const text = this.textOnly(p.content || p.description || '').trim(); if (/coming\s+soon/i.test(title)) return false; if ((title + ' ' + text).trim().length < 10) return false; return true; });
            if (valid.length) { posts = valid; const newest = valid.map(v => new Date(v.pubDate || v.pubdate || 0).getTime()).filter(n => !isNaN(n)).sort((a,b)=>b-a)[0]; els.status.textContent = newest ? `Last updated ${new Date(newest).toLocaleString([], { hour:'2-digit', minute:'2-digit', day:'2-digit', month:'short' })}` : ""; this.render(valid); return; }
          } catch(e) { console.warn('[Feed] JSON fetch failed', url, e?.message||e); }
        }

        try { const parsed = await fetchRssNative(RSS_URL); if (parsed.length) { posts = parsed.slice(0, MAX_ITEMS || 50); const newest = posts.map(v => new Date(v.pubDate || 0).getTime()).filter(n => !isNaN(n)).sort((a,b)=>b-a)[0]; els.status.textContent = newest ? `Last updated ${new Date(newest).toLocaleString([], { hour:'2-digit', minute:'2-digit', day:'2-digit', month:'short' })}` : ""; this.render(posts); return; } } catch (e) { console.warn('[Feed] Native fallback failed', e?.message||e); }

        this.fail();
      }

      fetchWithTimeout(url, ms=8000){
        const ctrl = new AbortController(); const id = setTimeout(()=>ctrl.abort(), ms);
        return fetch(url, { credentials:'omit', cache:'no-store', signal: ctrl.signal })
          .then(async r => { if (!r.ok) { if (r.status === 429) throw new Error('HTTP 429 (rate limited)'); throw new Error('HTTP ' + r.status); } return r.json(); })
          .finally(() => clearTimeout(id));
      }

      fail(){ els.status.className = 'status error'; els.status.setAttribute('role','alert'); els.status.textContent = "Unable to load poems right now. The words are taking a little break. ☁️"; }
    }

    const theme = new ThemeManager();
    const modal = new ModalManager();
    const content = new ContentManager();

    document.addEventListener('DOMContentLoaded', () => {
      const y = document.getElementById('footerYear'); if (y) y.textContent = String(new Date().getFullYear());
      theme.init();
      modal.init();
      content.init();
      console.log('✨ Torchborne — modern & fun');
    });
  </script>
</body>
</html>
