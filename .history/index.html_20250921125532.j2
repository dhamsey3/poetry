<!doctype html>
<html lang="en" data-theme="light">
<head>
  {% set STATIC = static_base or './static/' %}
  <meta charset="utf-8" />
  <title>{{ site_title or "Torchborne" }}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="robots" content="index,follow" />
  <meta name="description" content="Poetry & musings by Dami." />
  <meta name="color-scheme" content="light dark" />
  <meta id="themeColorMeta" name="theme-color" content="#f59e0b" />
  <link rel="canonical" href="{{ public_url or '' }}" />

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="preconnect" href="https://api.rss2json.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Playfair+Display:ital,wght@0,400;0,700;1,400&display=swap" rel="stylesheet">

  <!-- Styles -->
  <link rel="preload" as="style" href="{{ STATIC }}styles.css">
  <link id="mainCss" rel="stylesheet" href="{{ STATIC }}styles.css">
  <noscript><link rel="stylesheet" href="{{ STATIC }}styles.css"></noscript>

  <link rel="alternate" type="application/rss+xml" title="{{ site_title or 'Feed' }}" href="{{ feed_url }}" />
  <link rel="icon" type="image/png" sizes="64x64" href="{{ STATIC }}logo-light.png">

  <!-- Open Graph -->
  <meta property="og:title" content="{{ site_title or 'Torchborne' }}" />
  <meta property="og:description" content="Poetry & musings by Dami." />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="{{ public_url or '' }}" />
  <meta property="og:image" content="{{ STATICPUB ~ 'logo-light.svg' }}" />
  <meta property="og:site_name" content="{{ site_title or 'Torchborne' }}" />
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:image" content="{{ STATICPUB ~ 'logo-light.svg' }}" />

  <!-- Structured Data -->
  <script type="application/ld+json">
  {
    "@context":"https://schema.org",
    "@type":"CollectionPage",
    "name": {{ (site_title or "Torchborne") | tojson }},
    "description":"Poetry & musings by Dami.",
    "url": {{ (public_url or '') | tojson }}
  }
  </script>

  <!-- Relaxed CSP for this static setup -->
  <meta http-equiv="Content-Security-Policy" content="
    default-src 'self';
    img-src 'self' https: data:;
    style-src 'self' 'unsafe-inline' https:;
    font-src https:;
    script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;
    connect-src 'self' https:;
    base-uri 'self';
    form-action 'self';
    upgrade-insecure-requests
  ">
</head>
<body>
  <a href="#postsGrid" class="visually-hidden" id="skipLink">Skip to posts</a>
  <div id="noJsBanner" class="status error" role="alert" hidden>JavaScript is disabled. Some features (search, quick read) won't work. You can still read directly on Substack via the links below.</div>
  <noscript>
    <style>
      #noJsBanner,
      #noJsBanner[hidden] {
        display: block !important;
      }
    </style>
  </noscript>

  <!-- Floating Shapes -->
  <div class="floating-shapes" aria-hidden="true">
    <div class="shape accent"></div>
    <div class="shape accent-2"></div>
    <div class="shape accent-3"></div>
  </div>

  <!-- Particles -->
  <div class="particles" id="particles" aria-hidden="true"></div>

  <!-- Progress Bar -->
  <div class="progress-bar" id="progressBar" role="progressbar" aria-live="off" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"></div>

  <div id="appRoot" class="main-content" aria-hidden="false">
    <!-- HERO -->
    <section class="hero">
      <div class="wrap">
        <div class="hero-content">
          <div class="brand-section">
            <a href="./" class="brand-link">
              <img src="{{ STATIC }}logo-light.svg" alt="Torchborne logo" class="logo-img logo-light" fetchpriority="high" width="64" height="64" />
              <img src="{{ STATIC }}logo-dark.svg" alt="Torchborne logo" class="logo-img logo-dark" fetchpriority="high" width="64" height="64" />
              <h1 class="brand-name">{{ site_title or "Torchborne" }}</h1>
            </a>
            <div class="hero-tagline" aria-live="polite">where words carry the flame ‚ú®</div>
          </div>

          <div class="hero-actions">
            <button id="themeToggle" class="chip accent" title="Toggle theme" aria-pressed="false">
              <span id="themeIcon" aria-hidden="true">üåì</span> <span id="themeText">Theme</span>
            </button>
            <button id="refreshBtn" class="chip accent" title="Refresh posts">‚Üª Refresh</button>
            <button id="randomBtn" class="chip accent" title="Surprise me"><span>üé≤</span> Random</button>
            <button id="aboutBtn" class="btn" title="About" aria-haspopup="dialog" aria-controls="aboutModal">
              <span>üëã</span> About
            </button>
            {% if featured_ebook %}
            <a class="btn" href="{{ featured_ebook.url }}" target="_blank" rel="noopener">
              {{ featured_ebook.ctaText or 'Read eBook' }}
            </a>
            {% endif %}
            <a class="btn btn-primary" href="{{ SUBSCRIBE_URL }}" rel="noopener">
              <span>üíå</span> Subscribe
            </a>
          </div>

          <div class="search-section">
            <div class="search-wrapper">
              <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                <path d="M21 21l-4.35-4.35M10.5 18A7.5 7.5 0 1010.5 3a7.5 7.5 0 000 15z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
              </svg>
              <input id="searchInput" type="search" class="search-input" placeholder="Search through poems and musings..." aria-label="Search poems" />
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- MAIN CONTENT -->
    <main class="content">
      <div class="wrap">
        <div id="statusMessage" class="status" role="status" aria-live="polite"{% if posts %} hidden{% endif %}>
          {% if not posts %}Gathering poems from the digital ether...{% endif %}
        </div>
        <section id="postsGrid" class="posts-grid"{% if not posts %} hidden{% endif %}>
          {% if posts %}
            {% set accent_classes = ['accent', 'accent-2', 'accent-3'] %}
            {% for post in posts[:9] %}
              {% set slug = post.slug or '' %}
              {% set candidate_url = post.url or post.link %}
              {% set post_url = candidate_url if candidate_url else (POSTS_BASE ~ '/p/' ~ slug if slug else POSTS_BASE) %}
              {% set iso_date = post.date or post.pubDate or post.published_at %}
              {% set accent = accent_classes[loop.index0 % (accent_classes | length)] %}
              {% set card_title = post.title if post.title else (slug.replace('-', ' ') if slug else 'Untitled') %}
              <article class="card {{ accent }}" data-post-slug="{{ slug }}">
                <div class="card-thumb" aria-hidden="true"></div>
                <div class="card-content">
                  <h2 class="card-title"><a href="{{ post_url }}" target="_blank" rel="noopener">{{ card_title }}</a></h2>
                  <div class="card-meta">
                    {% if display_date %}<span>üìÖ {{ display_date }}</span>{% endif %}
                  </div>
                  <div class="card-summary">{{ post.excerpt or post.description or '' }}</div>
                  <div class="card-actions">
                    <a href="{{ post_url }}" target="_blank" rel="noopener">Read on Substack ‚Üí</a>
                  </div>
                </div>
              </article>
            {% endfor %}
          {% endif %}
        </section>
        <button id="loadMore" class="chip accent" style="display:none; margin: 24px auto 0;" aria-controls="postsGrid">Load older</button>
      </div>
    </main>

    <!-- FOOTER -->
    <footer class="footer">
      <div class="wrap">
        <div class="footer-content">
          <div class="footer-brand">
            <img src="{{ STATIC }}logo-light.svg" class="footer-logo logo-light" alt="" aria-hidden="true" width="32" height="32">
            <img src="{{ STATIC }}logo-dark.svg" class="footer-logo logo-dark" alt="" aria-hidden="true" width="32" height="32">
            <div class="footer-info">
              <h3>{{ site_title or "Torchborne" }}</h3>
              <div class="footerCopyright">¬© {{ generated_at.strftime("%Y") if generated_at else "2024" }} ‚Ä¢ Made with ‚ù§Ô∏è and pixels</div>
            </div>
          </div>

          <nav class="footer-links" aria-label="Footer">
            <a href="#" id="footerAboutLink" class="pill">About</a>
            <a href="{{ SUBSCRIBE_URL }}" class="pill">Subscribe</a>
            <a href="{{ POSTS_BASE }}" target="_blank" rel="noopener" class="pill">
              <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
                <path fill="currentColor" d="M3 5h18v2H3V5zm0 4h18v6l-9-3-9 3V9z"/>
              </svg>
              Substack
            </a>
          </nav>
        </div>
      </div>
    </footer>
  </div>

  <!-- READING MODAL -->
  <div id="readingModal" class="modal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="modalTitle" aria-describedby="modalBody" tabindex="-1" hidden>
    <div class="modal-content">
      <button class="modal-close" id="readingModalClose" aria-label="Close">‚úï</button>
      <div class="modal-header">
        <h2 class="modal-title" id="modalTitle"></h2>
        <div class="modal-meta" id="modalMeta"></div>
        <div class="modal-actions">
          <button id="prevPost" class="chip accent" title="Previous (‚Üê)">‚Üê Prev</button>
          <button id="nextPost" class="chip accent" title="Next (‚Üí)">Next ‚Üí</button>
        </div>
      </div>
      <div class="modal-body" id="modalBody"></div>
    </div>
  </div>

  <!-- ABOUT MODAL -->
  <div id="aboutModal" class="modal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="aboutTitle" tabindex="-1" hidden>
    <div class="modal-content">
      <button class="modal-close" id="aboutModalClose" aria-label="Close about">‚úï</button>
      <div class="modal-header">
        <div class="about-header">
          <img class="about-avatar" src="{{ STATIC }}avatar.jpg" alt="Torchborne" onerror="this.src='{{ STATIC }}logo-light.svg'">
          <div class="about-info">
            <h2 id="aboutTitle">About Torchborne</h2>
            <p class="about-tagline">Illuminating poetry, carrying the flame of words ‚ú®</p>
          </div>
        </div>

        <div class="about-body">
          <p>Welcome to my little corner of the internet where I explore the tender spaces between thoughts and feelings. Here you'll find poems, musings, and little sparks of inspiration that dance through everyday moments.</p>
          <p>I believe poetry lives in the smallest gestures‚Äîthe way light falls across a page, the pause between heartbeats, the stories we tell ourselves in the quiet hours. This collection gathers my public posts from Substack, made searchable and beautiful for wandering souls like yourself.</p>
        </div>

        <div class="about-cta">
          <a class="btn btn-primary" href="{{ SUBSCRIBE_URL }}" rel="noopener">
            <span>üíå</span> Subscribe on Substack
          </a>
          <button id="copyEmailBtn" class="btn" data-email="versesvibez@substack.com">
            <span>üìß</span> Copy Email
          </button>
        </div>

        <div class="about-links">
          <a href="{{ POSTS_BASE }}" target="_blank" rel="noopener" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
              <path fill="currentColor" d="M3 5h18v2H3V5zm0 4h18v6l-9-3-9 3V9z"/>
            </svg>
            Substack
          </a>
          <a href="mailto:versesvibez@substack.com" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
              <path fill="currentColor" d="M20 4H4a2 2 0 00-2 2v12a2 2 0 002 2h16a2 2 0 002-2V6a2 2 0 01-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
            </svg>
            Email
          </a>
          <a href="https://instagram.com/versesvibez" target="_blank" rel="noopener" class="pill">
            <svg viewBox="0 0 24 24" width="16" height="16" aria-hidden="true">
              <path fill="currentColor" d="M7 2h10a5 5 0 015 5v10a5 5 0 01-5 5H7a5 5 0 01-5-5V7a5 5 0 015-5zm5 5a5 5 0 100 10 5 5 0 000-10zm6.5-.9a1.1 1.1 0 110 2.2 1.1 1.1 0 010-2.2zM12 9a3 3 0 110 6 3 3 0 010-6z"/>
            </svg>
            Instagram
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- DOMPurify for robust sanitization -->
  <script id="initialPostsData" type="application/json">{{ (posts or []) | tojson }}</script>
  <script
    src="https://cdn.jsdelivr.net/npm/dompurify@3/dist/purify.min.js"
    integrity="sha384-OLBgp1GsljhM2TJ+sbHjaiH9txEUvgdDTAzHv2P24donTt6/529l+9Ua0vFImLlb"
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  ></script>

  <script>
    // ===== CONFIG =====
    const RSS_URL        = {{ (feed_url or "https://versesvibez.substack.com/feed") | tojson }};
    let   WORKER_BASE    = {{ (rss_proxy_url or "") | tojson }};
    const RSS2JSON_KEY   = {{ (rss2json_api_key or "") | tojson }};
    const MAX_ITEMS      = {{ (max_items or 50) | tojson }};
    const PUBLIC_BASE    =
      "https://api.rss2json.com/v1/api.json?"
      + (RSS2JSON_KEY ? ("api_key=" + encodeURIComponent(RSS2JSON_KEY) + "&") : "")
      + "count=" + encodeURIComponent(MAX_ITEMS) + "&rss_url=";
    const FEATURED_EBOOK = {{ (featured_ebook or {}) | tojson }};
    const TAGLINES = [
      "where words carry the flame ‚ú®",
      "poetry for wandering souls ‚úçÔ∏è",
      "verses that glow in the dark üåô"
    ];
    const SUBSTACK_BASE = {{ POSTS_BASE | tojson }};
    const STATIC_DATA_URL = './data/posts.json';

    function normalizeBase(base) {
      if (!base) return "";
      const hasParam = /[?&]rss_url=/.test(base);
      if (hasParam) return base;
      const hasQuery = base.includes("?");
      if (!hasQuery) return base + "?rss_url=";
      if (!/[&?]$/.test(base)) base += "&";
      return base + "rss_url=";
    }
    WORKER_BASE = normalizeBase(WORKER_BASE);

    const CLEAN_SUBSTACK_BASE = SUBSTACK_BASE.replace(/\/$/, '');

    function normalizePost(raw = {}) {
      if (!raw || typeof raw !== 'object') return null;
      const slug = typeof raw.slug === 'string' ? raw.slug.trim() : '';
      const candidates = [raw.link, raw.url, raw.href];
      let link = '';
      for (const cand of candidates) {
        if (typeof cand === 'string' && cand.trim()) { link = cand.trim(); break; }
      }
      if (!link && slug) link = `${CLEAN_SUBSTACK_BASE}/p/${slug}`;
      const pubDate = typeof raw.pubDate === 'string' ? raw.pubDate
        : typeof raw.pubdate === 'string' ? raw.pubdate
        : typeof raw.date === 'string' ? raw.date
        : '';
      const excerpt = typeof raw.excerpt === 'string' && raw.excerpt.trim()
        ? raw.excerpt
        : typeof raw.description === 'string' ? raw.description : '';
      const content = typeof raw.content === 'string' ? raw.content
        : typeof raw.html === 'string' ? raw.html
        : typeof raw.body === 'string' ? raw.body
        : '';
      let title = typeof raw.title === 'string' && raw.title.trim() ? raw.title.trim() : '';
      if (!title) {
        if (slug) {
          title = slug
            .replace(/[-_]+/g, ' ')
            .replace(/\b\w/g, s => s.toUpperCase());
        } else {
          title = 'Untitled';
        }
      }
      const tags = Array.isArray(raw.tags)
        ? raw.tags.filter(tag => typeof tag === 'string' && tag.trim()).map(tag => tag.trim())
        : [];
      return {
        ...raw,
        slug,
        title,
        link: link || '#',
        url: link || '#',
        pubDate: pubDate || '',
        description: excerpt || '',
        excerpt: excerpt || '',
        content,
        tags,
      };
    }

    function normalizePostsList(list) {
      if (!Array.isArray(list)) return [];
      return list.map(normalizePost).filter(Boolean);
    }

    function mergeEntries(base = {}, extra = {}) {
      const merged = { ...base };
      for (const key of Object.keys(extra)) {
        const val = extra[key];
        if (val == null) continue;
        if (typeof val === 'string') {
          if (!val.trim()) continue;
        } else if (Array.isArray(val)) {
          if (!val.length) continue;
        }
        merged[key] = val;
      }
      return merged;
    }

    function postTimestamp(post) {
      if (!post) return 0;
      const dateStr = post.pubDate || post.pubdate || post.date;
      if (!dateStr) return 0;
      const ts = Date.parse(dateStr);
      return Number.isFinite(ts) ? ts : 0;
    }

    function mergePostLists(existing = [], incoming = []) {
      const merged = [];
      const indexByKey = new Map();
      const add = item => {
        if (!item) return;
        const slugKey = typeof item.slug === 'string' && item.slug.trim() ? item.slug.trim().toLowerCase() : '';
        const guid = typeof item.guid === 'string' && item.guid.trim() ? item.guid.trim() : '';
        const id = typeof item.id === 'string' && item.id.trim() ? item.id.trim() : '';
        const linkKey = typeof item.link === 'string' && item.link.trim() ? item.link.trim() : '';
        const urlKey = typeof item.url === 'string' && item.url.trim() ? item.url.trim() : '';
        const titleKey = typeof item.title === 'string' && item.title.trim() ? item.title.trim() : '';
        const key = slugKey || guid || id || linkKey || urlKey || titleKey;
        if (!key) return;
        if (indexByKey.has(key)) {
          const idx = indexByKey.get(key);
          merged[idx] = mergeEntries(merged[idx], item);
        } else {
          indexByKey.set(key, merged.length);
          merged.push(item);
        }
      };
      (existing || []).forEach(add);
      (incoming || []).forEach(add);
      merged.sort((a, b) => postTimestamp(b) - postTimestamp(a));
      return merged;
    }

    const inlineDataElement = document.getElementById('initialPostsData');
    const INLINE_POSTS = (() => {
      if (!inlineDataElement) return [];
      const rawText = (inlineDataElement.textContent || inlineDataElement.innerText || '').trim();
      if (!rawText) return [];
      try {
        const parsed = JSON.parse(rawText);
        if (Array.isArray(parsed)) return normalizePostsList(parsed);
        if (parsed && Array.isArray(parsed.posts)) return normalizePostsList(parsed.posts);
      } catch (err) {
        console.warn('Inline posts JSON invalid', err);
      }
      return [];
    })();
    if (inlineDataElement) inlineDataElement.remove();

    // ===== DOM =====
    const els = {
      appRoot: document.getElementById('appRoot'),
      status: document.getElementById('statusMessage'),
      grid: document.getElementById('postsGrid'),
      search: document.getElementById('searchInput'),
      bar: document.getElementById('progressBar'),
      particles: document.getElementById('particles'),
      themeToggle: document.getElementById('themeToggle'),
      themeIcon: document.getElementById('themeIcon'),
      themeText: document.getElementById('themeText'),
      refreshBtn: document.getElementById('refreshBtn'),
      randomBtn: document.getElementById('randomBtn'),
      loadMore: document.getElementById('loadMore'),
      aboutBtn: document.getElementById('aboutBtn'),
      aboutModal: document.getElementById('aboutModal'),
      aboutClose: document.getElementById('aboutModalClose'),
      footerAbout: document.getElementById('footerAboutLink'),
      readingModal: document.getElementById('readingModal'),
      readingClose: document.getElementById('readingModalClose'),
      modalTitle: document.getElementById('modalTitle'),
      modalMeta: document.getElementById('modalMeta'),
      modalBody: document.getElementById('modalBody'),
      prev: document.getElementById('prevPost'),
      next: document.getElementById('nextPost'),
      copyEmailBtn: document.getElementById('copyEmailBtn'),
    };

    // ===== STATE =====
    let posts = INLINE_POSTS.slice();
    let iModal = 0;
    let lastFocus = null;
    const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    // ===== UTIL =====
    const debounce = (fn, ms=200) => {
      let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), ms); };
    };

    const escapeHtml = (str='') =>
      String(str)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');

    // Theme
    class ThemeManager {
      init(){
        const saved = localStorage.getItem('vv-theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const mode = saved || (prefersDark ? 'dark' : 'light');
        document.documentElement.setAttribute('data-theme', mode);
        this.syncButton();
        this.setThemeColor(mode);
        els.themeToggle?.addEventListener('click', () => this.toggle(), { passive: true });

        const mql = window.matchMedia('(prefers-color-scheme: dark)');
        if (mql.addEventListener) {
          mql.addEventListener('change', e => {
            if (!localStorage.getItem('vv-theme')) {
              const m = e.matches ? 'dark' : 'light';
              document.documentElement.setAttribute('data-theme', m);
              this.syncButton(); this.setThemeColor(m);
            }
          });
        } else if (mql.addListener) {
          mql.addListener(e => {
            if (!localStorage.getItem('vv-theme')) {
              const m = e.matches ? 'dark' : 'light';
              document.documentElement.setAttribute('data-theme', m);
              this.syncButton(); this.setThemeColor(m);
            }
          });
        }
      }
      toggle(){
        const cur = document.documentElement.getAttribute('data-theme') || 'light';
        const next = cur === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', next);
        localStorage.setItem('vv-theme', next);
        els.themeToggle.setAttribute('aria-pressed', String(next === 'dark'));
        this.bump(els.themeToggle);
        this.syncButton();
        this.setThemeColor(next);
      }
      syncButton(){
        const mode = document.documentElement.getAttribute('data-theme') || 'light';
        if (els.themeIcon) els.themeIcon.textContent = mode === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        if (els.themeText) els.themeText.textContent = mode === 'dark' ? 'Light mode' : 'Dark mode';
      }
      setThemeColor(mode){
        const meta = document.getElementById('themeColorMeta');
        if (meta) meta.setAttribute('content', mode === 'dark' ? '#0d0d0d' : '#f59e0b');
      }
      bump(el){ el.style.transform = 'scale(0.96)'; setTimeout(() => el.style.transform='', 120); }
    }

    // ... (rest of your JS remains as in your original)
  </script>
</body>
</html>
